{
	"info": {
		"_postman_id": "752947f5-4ceb-487e-ac88-4f825a783ca3",
		"name": "Users API V2_Smoke Test Cases - Integration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GIVEB-49 API: Users - PATCH User",
			"description": null,
			"item": [
				{
					"name": "/users/{{user_id}} - Update role Id to chimp Admin role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9f44ff1c-8076-4e45-abd0-44f83ed1a310",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 31 (admin@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"31\");",
									"",
									"var chimpAdminRoleId = null;",
									"",
									"//To get the chimp Admin Role Id from the GET response",
									"// pm.sendRequest(pm.environment.get(\"api_host\")+\"/api/v2/users/\"+\"31\"+\"?include=chimpAdminRole\" , function (err, response) {",
									"//     //Response in json format",
									"//     var jsonData = response.json();",
									"//     chimpAdminRoleId = jsonData.data.relationships.chimpAdminRole['data']['id'];",
									"//     console.log(\"Chimp Admin Role Id: \"+chimpAdminRoleId);",
									"//     pm.variables.set(\"chimpAdmin_RoleId\", parseInt(chimpAdminRoleId));",
									"// });",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"api_host\")+\"/api/v2/users/\"+\"31\"+\"?include=chimpAdminRole\",",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/vnd.api+json',",
									"        'Content-Type': 'application/vnd.api+json',",
									"        'Authorization': 'Bearer '+pm.variables.get(\"auth0_access_token_31\") //Refer collection pre-request",
									"    }",
									"}, function(err, response) {",
									"    if (response.json().error) {",
									"        console.log(\"### ERROR - There was a problem with the Pre Req. Check console for details.\");",
									"    } else {",
									"        //Response in json format",
									"        var jsonData = response.json();",
									"        chimpAdminRoleId = jsonData.data.relationships.chimpAdminRole['data']['id'];",
									"        console.log(\"Chimp Admin Role Id: \"+chimpAdminRoleId);",
									"        pm.variables.set(\"chimpAdmin_RoleId\", parseInt(chimpAdminRoleId));",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e3ee0e6e-01bf-4700-9b8d-fcbe8e25751f",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    // Status Check Test:",
									"    pm.test(\"Expecting Status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    // Response Time Test:",
									"    // pm.test(\"Response time is less than 500ms\", function () {",
									"    //     pm.expect(pm.response.responseTime).to.be.below(500);",
									"    // });",
									"    ",
									"    // JSON Does Not Contain Error Text:",
									"    pm.test(\"Response should not contain error\", function () {",
									"        pm.response.to.not.have.jsonBody(\"error\");",
									"    });",
									"    ",
									"    // Response Type Test",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Check if user Id matches the user Id passed",
									"    var userId = pm.variables.get(\"user_id\");",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check if user Id matches the user Id passed",
									"    var expectedActiveRoleId = pm.variables.get(\"chimpAdmin_RoleId\");",
									"    console.log(\"Active Rold Id retrieved from response: \"+jsonData.data.attributes.activeRoleId);",
									"    jsonValueCheck(\"Active Rold Id retrieved from response should match the role id passed in the request body\", jsonData.data.attributes.activeRoleId, expectedActiveRoleId);",
									"    ",
									"    //Check value of data.type",
									"    jsonValueCheck(\"Value of key 'data[type]' should be users\", jsonData.data.type, \"users\");",
									"    ",
									"    //Check value of data.attributes.language",
									"    jsonValueCheck(\"Value of key 'data[attributes][language]' should be 'en'\", jsonData.data.attributes.language, \"en\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_31}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"users\",\n    \"id\": {{user_id}},\n    \"attributes\": {\n      \"activeRoleId\": {{chimpAdmin_RoleId}},\n      \"language\": \"en\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Seeded user id - 31 (admin@chimp.net)\n\nSend a PATCH to /users with a valid active rolde ID (chimp admin role)  \n\nExpecting Status code to be 200\n\nResponse time is less than 500ms\n\nResponse should not contain error\n\nResponse should be json\n\nUser Id in response should match the user Id passed\n\nActive Rold Id retrieved from response should match the role id passed in the request body\n\nValue of key 'data[type]' should be users\n\nValue of key 'data[attributes][language]' should be 'en'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - Update role Id to donor role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "025306e6-75fa-4d5a-a2d7-8636c040817a",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									"",
									"var donorRoleId = null;",
									"",
									"//To get the company Admin Role Id from the GET response",
									"// pm.sendRequest(pm.environment.get(\"api_host\")+\"/api/v2/users/\"+\"999000\"+\"?include=administeredCompanies,companyAdminRoles\" , function (err, response) {",
									"//     //Response in json format",
									"//     var jsonData = response.json();",
									"//     companyAdminRoleId = jsonData.data.relationships.companyAdminRoles.data[0]['id'];",
									"//     console.log(\"Company Admin Role Id: \"+companyAdminRoleId);",
									"//     pm.variables.set(\"companyAdmin_RoleId\", parseInt(companyAdminRoleId));",
									"// });",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"api_host\")+\"/api/v2/users/\"+pm.variables.get(\"user_id\")+\"?include=donorRole\",",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/vnd.api+json',",
									"        'Content-Type': 'application/vnd.api+json',",
									"        'Authorization': 'Bearer '+pm.variables.get(\"auth0_access_token_999000\") //Refer collection pre-request",
									"    }",
									"}, function(err, response) {",
									"    if (response.json().error) {",
									"        console.log(\"### ERROR - There was a problem with the Pre Req. Check console for details.\");",
									"    } else {",
									"        //Response in json format",
									"        var jsonData = response.json();",
									"        donorRoleId = jsonData.data.relationships.donorRole.data['id'];",
									"        console.log(\"Donor Role Id: \"+donorRoleId);",
									"        pm.variables.set(\"donor_RoleId\", parseInt(donorRoleId));",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "da195c35-b5d5-493b-97aa-f665daee2cea",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    // Status Check Test:",
									"    pm.test(\"Expecting Status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    // Response Time Test:",
									"    // pm.test(\"Response time is less than 500ms\", function () {",
									"    //     pm.expect(pm.response.responseTime).to.be.below(500);",
									"    // });",
									"    ",
									"    // JSON Does Not Contain Error Text:",
									"    pm.test(\"Response should not contain error\", function () {",
									"        pm.response.to.not.have.jsonBody(\"error\");",
									"    });",
									"    ",
									"    // Response Type Test",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Check if user Id matches the user Id passed",
									"    var userId = pm.variables.get(\"user_id\");",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check if user Id matches the user Id passed",
									"    var expectedActiveRoleId = pm.variables.get(\"donor_RoleId\");",
									"    console.log(\"Active Rold Id retrieved from response: \"+jsonData.data.attributes.activeRoleId);",
									"    jsonValueCheck(\"Active Rold Id retrieved from response should match the role id passed in the request body\", jsonData.data.attributes.activeRoleId, expectedActiveRoleId);",
									"    ",
									"    //Check value of data.type",
									"    jsonValueCheck(\"Value of key 'data[type]' should be users\", jsonData.data.type, \"users\");",
									"    ",
									"    //Check value of data.attributes.language",
									"    jsonValueCheck(\"Value of key 'data[attributes][language]' should be 'en'\", jsonData.data.attributes.language, \"en\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"users\",\n    \"id\": {{user_id}},\n    \"attributes\": {\n      \"activeRoleId\": {{donor_RoleId}},\n      \"language\": \"en\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Seeded user id - 999000 (api@chimp.net)\n\nSend a PATCH to /users with a valid active rolde ID (donor role)  \n\nExpecting Status code to be 200\n\nResponse time is less than 500ms\n\nResponse should not contain error\n\nResponse should be json\n\nUser Id in response should match the user Id passed\n\nActive Rold Id retrieved from response should match the role id passed in the request body\n\nValue of key 'data[type]' should be users\n\nValue of key 'data[attributes][language]' should be 'en'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - Update role Id to a role id which is not owned by the User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a37657ed-7dde-4071-aad5-71866ee9efe9",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									"",
									"var chimpAdminRoleId = null;",
									"",
									"//To get the chimp Admin Role Id from the GET response",
									"/*pm.sendRequest(pm.environment.get(\"api_host\")+\"/api/v2/users/\"+\"31\"+\"?include=chimpAdminRole\" , function (err, response) {",
									"    //Response in json format",
									"    var jsonData = response.json();",
									"    chimpAdminRoleId = jsonData.data.relationships.chimpAdminRole['data']['id'];",
									"    console.log(\"Chimp Admin Role Id: \"+chimpAdminRoleId);",
									"    pm.variables.set(\"chimpAdmin_RoleId\", parseInt(chimpAdminRoleId));",
									"});*/",
									"",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"api_host\")+\"/api/v2/users/\"+\"31\"+\"?include=chimpAdminRole\",",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/vnd.api+json',",
									"        'Content-Type': 'application/vnd.api+json',",
									"        'Authorization': 'Bearer '+pm.variables.get(\"auth0_access_token_31\") //Refer collection pre-request",
									"    }",
									"}, function(err, response) {",
									"    if (response.json().error) {",
									"        console.log(\"### ERROR - There was a problem with the Pre Req. Check console for details.\");",
									"    } else {",
									"        //Response in json format",
									"        var jsonData = response.json();",
									"        chimpAdminRoleId = jsonData.data.relationships.chimpAdminRole['data']['id'];",
									"        console.log(\"Chimp Admin Role Id: \"+chimpAdminRoleId);",
									"        pm.variables.set(\"chimpAdmin_RoleId\", parseInt(chimpAdminRoleId));",
									"    }",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ac0e1b36-fab0-445e-befe-344b62db8d92",
								"type": "text/javascript",
								"exec": [
									"// Status Check Test:",
									"pm.test(\"Expecting Status code to be 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"// Response Time Test:",
									"// pm.test(\"Response time is less than 500ms\", function () {",
									"//     pm.expect(pm.response.responseTime).to.be.below(500);",
									"// });",
									"",
									"// Response Type Test",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"// JSON Contains errors Key:",
									"pm.test(\"Response Body contains errors key\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"errors\");",
									"});",
									"",
									"pm.test(\"Response Body contains key errors with value of 'could_not_assign_role'\", function() {",
									"    pm.expect(pm.response.json().errors[0].title).to.contain(\"could_not_assign_role\");",
									"});",
									"    ",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"users\",\n    \"id\": {{user_id}},\n    \"attributes\": {\n      \"activeRoleId\": {{chimpAdmin_RoleId}},\n      \"language\": \"en\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Seeded user id - 999000 (api@chimp.net)\n\nSend a PATCH to /users with a valid user Id and role Id which is not ownned by the user\n\nExpecting Status code to be 400\n\nResponse time is less than 500ms\n\nResponse should be json\n\nResponse Body contains errors key\n\nResponse Body contains key errors with value of 'Could not assign Role....'"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ec00e78b-ed1c-4f97-b625-03e48f2c028d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1271c4b4-39ec-4ff9-a764-cbe9fc5880ee",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GIVEB-20 Header - GET User Header Attributes",
			"description": null,
			"item": [
				{
					"name": "/users/{{user_id}} - User Details by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56fe7052-4205-4627-80d8-bf127db3178a",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"//Status code check",
									"pm.test(\"Expecting status code to be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"try {",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    var firstKey;",
									"    for (var i in jsonData){",
									"        firstKey = i;",
									"    }",
									"    pm.test(\"'data' key should be available in response\", function () {",
									"        pm.expect(firstKey).to.equal('data');",
									"    });",
									"    ",
									"    var dataArray = ['id', 'type', 'links', 'attributes', 'relationships'];",
									"    for (var i in jsonData.data){",
									"        validateTests(i, dataArray[dataArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var attributesArray = ['avatar', 'displayName', 'language', 'balance', 'activeRoleId', 'createdAt'];",
									"    for (var i in jsonData.data.attributes){",
									"        validateTests(i, attributesArray[attributesArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var relationshipsArray =['administeredGroups', 'administeredCampaigns', 'administeredCompanies', 'administeredBeneficiaries', 'beneficiaryAdminRoles', 'companyAdminRoles', 'donorRole', 'chimpAdminRole', 'activeRole','taxReceiptProfiles','paymentInstruments','employedCompanies','enabledEmployeeRoles','defaultTaxReceiptProfile','fund', 'donationMatchPolicies'];",
									"    for (var i in jsonData.data.relationships){",
									"        //validateTests(i, relationshipsArray[relationshipsArray.indexOf(i)]);",
									"        console.log(\"I = \"+i);",
									"        jsonValueCheck(\"Key '\"+i+\"'retrieved from response 'jsonData.data.relationships' should be an element of array: \"+relationshipsArray, relationshipsArray.includes(i), true);",
									"    }",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check value of data.type",
									"    jsonValueCheck(\"Value of key 'data[type]' should be users\", jsonData.data.type, \"users\");",
									"    ",
									"    //Check value of data.attributes.language",
									"    //jsonValueCheck(\"Value of key 'data[attributes][language]' should be 'en'\", jsonData.data.attributes.language, \"en\");",
									"    ",
									"    //Check data type of key data.relationships",
									"    jsonValueCheck(\"Data type of of key 'data' should be object\", typeof(jsonData.data), \"object\");",
									"    ",
									"    //Check data type of key data.attributes.balance",
									"    // jsonValueCheck(\"Data type of of key 'data[attributes][balance]' should be number\", typeof(jsonData.data.attributes.balance), \"number\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "645cfbbc-d57e-4ca6-a1b2-3135dbf53247",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with a Valid User ID (User id used for this test case is a seeded user, user_id - 999000)  \nExpects a Status of 200  \nExpects the response to be within 500ms  \nExpects a JSON Response containing user details  \nExpects the below keys in the response  \n- 'data', id', 'type', 'links', 'attributes', \n- 'relationships' 'attributes' 'avatar', 'displayName', 'language', \n- 'balance', 'activeRoleId', 'createdAt' 'relationships' 'administeredGroups', \n- 'administeredCampaigns', 'administeredCompanies', 'administeredBeneficiaries', 'beneficiaryAdminRoles', 'companyAdminRoles', \n- 'donorRole', 'chimpAdminRole', 'activeRole'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details by valid ID and invalid access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45f14535-83e3-42a5-be25-6cb9d6867108",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Status Check Test",
									"pm.test(\"Expecting Status code to be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The value of key 'status' should be 'Unauthorized'\", function () {",
									"    pm.expect(jsonData[0].status).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"The value of key 'code' should be '101'\", function () {",
									"    pm.expect(jsonData[0].code).to.eql(\"101\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "645cfbbc-d57e-4ca6-a1b2-3135dbf53247",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer junk {{auth0_access_token_999000}} sdfsdjlkj"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with a Valid User ID (User id used for this test case is a seeded user, user_id - 999000)  \n\nExpecting Status code to be 401\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Unauthorized'\n\nThe value of key 'code' should be '101'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details by Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a36fd3e-a2ff-4e75-b902-efa1be038699",
								"type": "text/javascript",
								"exec": [
									"//Status Check Test",
									"pm.test(\"Expecting Status code to be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The value of key 'status' should be 'Unauthorized'\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].status).to.eql(\"Unauthorized\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5ac9a209-3179-438f-9bc3-869b47fca9f7",
								"type": "text/javascript",
								"exec": [
									"//Setting invalid User Id",
									"pm.variables.set(\"user_id\", \"LKJh\");",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{user_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with an invalid user Id  \n\nExpecting Status code to be 401\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Unauthorized'\n\nThe value of key 'code' should be '101'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details by unknown user ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f91d134-cdc3-4446-ae5e-e8f44116deca",
								"type": "text/javascript",
								"exec": [
									"//Setting unknown User Id",
									"pm.variables.set(\"user_id\", 0);",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cd3ebe7-9f69-4a36-b92d-cc258c7b5d13",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Status Check Test",
									"pm.test(\"Expecting Status code to be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The value of key 'status' should be 'Unauthorized'\", function () {",
									"    pm.expect(jsonData[0].status).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"The value of key 'code' should be '101'\", function () {",
									"    pm.expect(jsonData[0].code).to.eql(\"101\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with an unknown user Id (user Id format is valid but does not exist in the system, eg: userId - 0)  \n\nExpecting Status code to be 401\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Unauthorized'\n\nThe value of key 'code' should be '101'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - Incorrect end point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a79e85de-b474-4bf7-8215-e057af65342c",
								"type": "text/javascript",
								"exec": [
									"//Status code should be 400",
									"pm.test(\"Status code should be 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The response should have 'error' key\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"error\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e680264a-8883-4991-b577-adb648430f2b",
								"type": "text/javascript",
								"exec": [
									"//User id here is 999000. This is a seeded user",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/user/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"user",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with valid user id (seeded user- 999000) but incorrect end point  \nExpects status code to be 404  \nExpects response time within 500ms  \n  \nIncorrect endpoint - {{api_host}}/api/v2/user/{{user_id}}  \nCorrect endpoint - {{api_host}}/api/v2/users/{{user_id}}"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole - with all administered entities and roles data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "486b074f-1739-46ae-a5c1-14fceb8d70ee",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eb0d7f48-a68b-4aa5-9ad5-e4e02b738cc8",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"//Status code check",
									"pm.test(\"Expecting status code to be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"try {",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Verify that the 'data' key for each entity is an array of objects containing the entity details",
									"    //for eg: 'jsonData.data.relationships.administeredGroups.data' key under administeredGroups should have 6 objects",
									"    ",
									"    var groupCount = 0;",
									"    for (var i in jsonData.data.relationships.administeredGroups.data){",
									"        groupCount++;",
									"    }",
									"    jsonValueCheck(\"The number of groups available in the response should be 6\", groupCount, 6);",
									"    ",
									"    var groupIdArray = [];",
									"    //Verify that the value of \"administeredGroups[data][i][type]\" key is \"groups\"",
									"    for (var i in jsonData.data.relationships.administeredGroups.data){",
									"        groupIdArray.push(jsonData.data.relationships.administeredGroups.data[i]['id']);",
									"        jsonValueCheck(\"The value of key administeredGroups[data][\"+i+\"][type] should be groups\", jsonData.data.relationships.administeredGroups.data[i]['type'], \"groups\");",
									"    }",
									"    console.log(\"Group Ids: \"+groupIdArray);",
									"    ",
									"    var campaignCount = 0;",
									"    for (var i in jsonData.data.relationships.administeredCampaigns.data){",
									"        campaignCount++;",
									"    }",
									"    jsonValueCheck(\"The number of campaigns available in the response should be 6\", campaignCount, 6);",
									"    ",
									"    var campaignIdArray = [];",
									"    //Verify that the value of \"administeredCampaigns[data][i][type]\" key is \"campaigns\"",
									"    for (var i in jsonData.data.relationships.administeredCampaigns.data){",
									"        campaignIdArray.push(jsonData.data.relationships.administeredCampaigns.data[i]['id']);",
									"        jsonValueCheck(\"The value of key administeredCampaigns[data][\"+i+\"][type] should be campaigns\", jsonData.data.relationships.administeredCampaigns.data[i]['type'], \"campaigns\");",
									"    }",
									"    console.log(\"Campaign Ids: \"+campaignIdArray);",
									"    ",
									"    var companyCount = 0;",
									"    for (var i in jsonData.data.relationships.administeredCompanies.data){",
									"        companyCount++;",
									"    }",
									"    jsonValueCheck(\"The number of companies available in the response should be 6\", companyCount, 6);",
									"    ",
									"    var companyIdArray = [];",
									"    //Verify that the value of \"administeredCompanies[data][i][type]\" key is \"companies\"",
									"    for (var i in jsonData.data.relationships.administeredCompanies.data){",
									"        companyIdArray.push(jsonData.data.relationships.administeredCompanies.data[i]['id']);",
									"        jsonValueCheck(\"The value of key administeredCompanies[data][\"+i+\"][type] should be companies\", jsonData.data.relationships.administeredCompanies.data[i]['type'], \"companies\");",
									"    }",
									"    console.log(\"Company Ids: \"+companyIdArray);",
									"    ",
									"    var beneficiaryCount = 0;",
									"    for (var i in jsonData.data.relationships.administeredBeneficiaries.data){",
									"        beneficiaryCount++;",
									"    }",
									"    jsonValueCheck(\"The number of beneficiaries available in the response should be 6\", beneficiaryCount, 6);",
									"    ",
									"    var beneficiaryIdArray = [];",
									"    //Verify that the value of \"administeredBeneficiaries[data][i][type]\" key is \"beneficiaries\"",
									"    for (var i in jsonData.data.relationships.administeredBeneficiaries.data){",
									"        beneficiaryIdArray.push(jsonData.data.relationships.administeredBeneficiaries.data[i]['id']);",
									"        jsonValueCheck(\"The value of key administeredBeneficiaries[data][\"+i+\"][type] should be beneficiaries\", jsonData.data.relationships.administeredBeneficiaries.data[i]['type'], \"beneficiaries\");",
									"    }",
									"    console.log(\"Benficiary Ids: \"+beneficiaryIdArray);",
									"    ",
									"    var beneficiaryAdminCount = 0;",
									"    var beneficiaryAdminRoleArray = [];",
									"    for (var i in jsonData.data.relationships.beneficiaryAdminRoles.data){",
									"        beneficiaryAdminRoleArray.push(jsonData.data.relationships.beneficiaryAdminRoles.data[i]['id']);",
									"        beneficiaryAdminCount++;",
									"    }",
									"    jsonValueCheck(\"The number of beneficiary admin roles should be 6\", beneficiaryAdminCount, 6);",
									"    console.log(\"beneficiaryAdminRoleArray: \"+beneficiaryAdminRoleArray);",
									"    ",
									"    ",
									"    var companyAdminCount = 0;",
									"    var companyAdminRoleArray =[];",
									"    for (var i in jsonData.data.relationships.companyAdminRoles.data){",
									"        companyAdminRoleArray.push(jsonData.data.relationships.companyAdminRoles.data[i]['id']);",
									"        companyAdminCount++;",
									"    }",
									"    jsonValueCheck(\"The number of company admin roles should be 6\", companyAdminCount, 6);",
									"    console.log(\"companyAdminRoleArray: \"+companyAdminRoleArray);",
									"    ",
									"    //Verify the donor user role id to be the active role",
									"    var donorUserId = jsonData.data.relationships.donorRole.data.id;",
									"    jsonValueCheck(\"The donor role user id should be the active role as the user is of type donor\", jsonData.data.relationships.activeRole.data.id, donorUserId);",
									"    ",
									"    jsonValueCheck(\"Verifying that the user is not a chimp admin\", jsonData.data.relationships.chimpAdminRole.data, null);",
									"    ",
									"    jsonValueCheck(\"The donor role user id should be present in the last object under included array\", jsonData.included[36]['id'], donorUserId);",
									"    ",
									"    //Number of objects in included array should be 37",
									"    //7 groups + 7 campaigns + 7 companies + 7 beneficiaries + 7 beneficiaryadminrole + 7 companyadminrole + 1active role ",
									"    jsonValueCheck(\"The number of objects in included array under response should be 37\", jsonData.included.length, 37);",
									"    ",
									"    //Verify groud ids and group names in included array",
									"    var groupNameArray = ['Rabbit Sanctuary', 'Flop-ear Families', 'Pot-bellied Pals', 'Bunny Buddies', 'Piggy Rescue', 'Dwarf Rabbit Disaster Recovery'];",
									"    var groupSlugArray = ['rabbit-sanctuary', 'flop-ear-families', 'pot-bellied-pals', 'bunny-buddies', 'piggy-rescue', 'dwarf-rabbit-disaster-recovery'];",
									"    for (var i=0; i < jsonData.included.length - 31; i++ ){",
									"        jsonValueCheck(\"The group id's retrieved in response should match the group id's in included array\", jsonData.included[i]['id'], groupIdArray[i]);",
									"        jsonValueCheck(\"The group name \"+groupNameArray[i]+\" should match the group name in included array\", jsonData.included[i]['attributes']['name'], groupNameArray[i]);",
									"        jsonValueCheck(\"The group slug \"+groupSlugArray[i]+\" should match the group slug in included array\", jsonData.included[i]['attributes']['slug'], groupSlugArray[i]);",
									"    }",
									"    ",
									"    var campaignNameArray = ['Minimising Music Mogul Misery', 'Justice for the poor', 'Clean Water for all', 'Food Banks of BC', 'Athiest Alms', 'Animal Action'];",
									"    var campaignSlugArray =['minimising-music-mogul-misery', 'justice-for-the-poor', 'clean-water-for-all', 'food-banks-of-bc', 'athiest-alms', 'animal-action',];",
									"    //Verify campaign ids and campaign names in included array",
									"    for (var i=6; i < jsonData.included.length - 25; i++ ){",
									"        jsonValueCheck(\"The campaign id's retrieved in response should match the campaign id's in included array\", jsonData.included[i]['id'], campaignIdArray[i-6]);",
									"        jsonValueCheck(\"The campaign name \"+campaignNameArray[i-6]+\" should match the campaign name in included array\", jsonData.included[i]['attributes']['name'], campaignNameArray[i-6]);",
									"        jsonValueCheck(\"The campaign slug \"+campaignSlugArray[i-6]+\" should match the campaign slug in included array\", jsonData.included[i]['attributes']['slug'], campaignSlugArray[i-6]);",
									"    }",
									"    ",
									"    var companyNameArray = ['Acme Company', 'Cement Co', 'Nike', 'Supermarket 4 U', 'The Codfather', 'Wok & Roll'];",
									"    var companySlugArray = ['acme-company', 'cement-co', 'nike', 'supermarket-4-u', 'the-codfather', 'wok-roll'];",
									"    //Verify company ids and company names in included array",
									"    for (var i=12; i < jsonData.included.length - 19; i++ ){",
									"        jsonValueCheck(\"The company id's retrieved in response should match the company id's in included array\", jsonData.included[i]['id'], companyIdArray[i-12]);",
									"        jsonValueCheck(\"The company name \"+companyNameArray[i-12]+\" should match the company name in included array\", jsonData.included[i]['attributes']['name'], companyNameArray[i-12]);",
									"        jsonValueCheck(\"The company slug \"+companySlugArray[i-12]+\" should match the company slug in included array\", jsonData.included[i]['attributes']['slug'], companySlugArray[i-12]);",
									"    }",
									"    ",
									"    var beneficiaryNameArray = ['Canadian Chamber Academy', 'Redshift Music Society', 'Music Heals Foundation', 'Celtic Music Interpretative Center', 'Mayne Island Concerts Society' , 'Music in the Morning Society'];",
									"    var beneficiarySlugArray = ['canadian-chamber-academy', 'redshift-music-society', 'music-heals-foundation', 'celtic-music-interpretative-center', 'mayne-island-concerts-society', 'music-in-the-morning-society'];",
									"    //Verify beneficiary ids and beneficiary names in included array",
									"    for (var i=18; i < jsonData.included.length - 13; i++ ){",
									"        jsonValueCheck(\"The beneficiary id's retrieved in response should match the beneficiary id's in included array\", jsonData.included[i]['id'], beneficiaryIdArray[i-18]);",
									"        jsonValueCheck(\"The beneficiary name \"+beneficiaryNameArray[i-18]+\" should match the beneficiary name in included array\", jsonData.included[i]['attributes']['name'], beneficiaryNameArray[i-18]);",
									"        jsonValueCheck(\"The beneficiary slug \"+beneficiarySlugArray[i-18]+\" should match the beneficiary slug in included array\", jsonData.included[i]['attributes']['slug'], beneficiarySlugArray[i-18]);",
									"    }",
									"    ",
									"    //Verify beneficiary admin roles in included array",
									"    for (var i=24; i < jsonData.included.length - 7; i++ ){",
									"        jsonValueCheck(\"The beneficiary admin role retrieved in response should match the beneficiary admin role in included array\", jsonData.included[i]['id'], beneficiaryAdminRoleArray[i-24]);",
									"    }",
									"    ",
									"    //Verify company admin roles in included array",
									"    for (var i=30; i < jsonData.included.length - 1; i++ ){",
									"        jsonValueCheck(\"The company admin role retrieved in response should match the company admin role in included array\", jsonData.included[i]['id'], companyAdminRoleArray[i-30]);",
									"    }",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole"
								}
							]
						},
						"description": "### Test for a user where the user is Admin for  \n- 6 groups  \n- 6 campaigns  \n- 6 companies  \n- 6 beneficiaries  \n\nSeeded user id is 999000  \nUser - api@chimp.net (Donor role)  \nGroups - ['Rabbit Sanctuary', 'Flop-ear Families', 'Pot-bellied Pals', 'Bunny Buddies', 'Piggy Rescue', 'Dwarf Rabbit Disaster Recovery']  \nCampaigns - ['Minimising Music Mogul Misery', 'Justice for the poor', 'Clean Water for all', 'Food Banks of BC', 'Athiest Alms', 'Animal Action']  \nCompanies - ['Acme Company', 'Cement Co', 'Nike', 'Supermarket 4 U', 'The Codfather', 'Wok & Roll']  \nBeneficiaries - ['Canadian Chamber Academy', 'Celtic Music Interpretative Center', 'Mayne Island Concerts Society', 'Music Heals Foundation', 'Music in the Morning Society', 'Redshift Music Society']  \n\n### Tests  \nSends a GET request with valid user Id and include parameter with all administered entities and roles  \nExpects the response code to be 200  \nExpects the response time within 500ms  \nExpects the below keys in the response  \n'data', id', 'type', 'links', 'attributes', 'relationships' 'attributes' 'avatar', 'displayName', 'language', 'balance', 'activeRoleId', 'createdAt' 'relationships' 'administeredGroups', 'administeredCampaigns', 'administeredCompanies', 'administeredBeneficiaries', 'beneficiaryAdminRoles', 'companyAdminRoles', 'donorRole', 'chimpAdminRole', 'activeRole' 'included'  \nExpects the number of objects to be 37 in 'included' array in response\nExpects the number of groups in the response to be 6\nExpects the number of campaigns in the response to be 6\nExpects the number of companies in the response to be 6\nExpects the number of beneficiaries in the response to be 6\nExpects the number of beneficiary admin roles in the response to be 6\nExpects the number of company admin roles in the response to be 6\nExpects that the group ids retrieved under 'data' key in response should match the group ids in objects available under 'included' array in response\nExpects that the campaign ids retrieved under 'data' key in response should match the campaign ids in objects available under 'included' array in response\nExpects that the company ids retrieved under 'data' key in response should match the company ids in objects available under 'included' array in response\nExpects that the beneficiary ids retrieved under 'data' key in response should match the beneficiary ids in objects available under 'included' array in response\nExpects that the beneficiary admin role ids retrieved under 'data' key in response should match the beneficiary admin role ids in objects available under 'included' array in response\nExpects that the company admin roles ids retrieved under 'data' key in response should match the company admin roles ids in objects available under 'included' array in response\n\nExpects the below group names to be available in objects under 'included' array\n['Rabbit Sanctuary', 'Flop-ear Families', 'Pot-bellied Pals', 'Bunny Buddies', 'Piggy Rescue', 'Dwarf Rabbit Disaster Recovery']\nExpects the below group slugs to be available in objects under 'included' array\n['rabbit-sanctuary', 'flop-ear-families', 'pot-bellied-pals', 'bunny-buddies', 'piggy-rescue', 'dwarf-rabbit-disaster-recovery']\n\nExpects the below campaign names to be available in objects under 'included' array\n['Minimising Music Mogul Misery', 'Justice for the poor', 'Clean Water for all', 'Food Banks of BC', 'Athiest Alms', 'Animal Action']\nExpects the below campaign slugs to be available in objects under 'included' array\n['minimising-music-mogul-misery', 'justice-for-the-poor', 'clean-water-for-all', 'food-banks-of-bc', 'athiest-alms', 'animal-action',]\n\nExpects the below company names to be available in objects under 'included' array\n['Acme Company', 'Cement Co', 'Nike', 'Supermarket 4 U', 'The Codfather', 'Wok & Roll']\nExpects the below company slugs to be available in objects under 'included' array\n['acme-company', 'cement-co', 'nike', 'supermarket-4-u', 'the-codfather', 'wok-roll']\n\nExpects the below beneficiary names to be available in objects under 'included' array\n['Canadian Chamber Academy', 'Celtic Music Interpretative Center', 'Mayne Island Concerts Society', 'Music Heals Foundation', 'Music in the Morning Society', 'Redshift Music Society']\nExpects the below beneficiary slugs to be available in objects under 'included' array\n['canadian-chamber-academy', 'celtic-music-interpretative-center', 'mayne-island-concerts-society', 'music-heals-foundation', 'music-in-the-morning-society', 'redshift-music-society']\n\nChecks for data type of response, data types of some keys (balance)\nChecks for json value (user id, type, language, relationships types etc)\nChecks for user role and active role in data key\nValidation of active user role in included key\netc"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=administeredGroups - with administered groups",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2ba0dc89-d454-45ac-8838-cc68322715b8",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d2d40cc-fb1b-49e2-9ede-20d16883a487",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"//Status code check",
									"pm.test(\"Expecting status code to be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"try {",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Verify that 'jsonData.data.relationships.administeredGroups' have 'data' key",
									"    var subKeys = ['links', 'data'];",
									"    for (var i in jsonData.data.relationships.administeredGroups){",
									"        jsonValueCheck(\"The key(s) under 'jsonData.data.relationships.administeredGroups' should have 'links' and 'data' as keys\", i, subKeys[subKeys.indexOf(i)]);",
									"    }",
									"    ",
									"    //Verify that the 'data' key for administeredGroups is an array of objects containing the entity details",
									"    //for eg: 'jsonData.data.relationships.administeredGroups.data' key under administeredGroups should have 6 objects",
									"    ",
									"    var groupCount = 0;",
									"    for (var i in jsonData.data.relationships.administeredGroups.data){",
									"        groupCount++;",
									"    }",
									"    jsonValueCheck(\"The number of groups available in the response should be 6\", groupCount, 6);",
									"    ",
									"    var groupIdArray = [];",
									"    //Verify that the value of \"administeredGroups[data][i][type]\" key is \"groups\"",
									"    for (var i in jsonData.data.relationships.administeredGroups.data){",
									"        groupIdArray.push(jsonData.data.relationships.administeredGroups.data[i]['id']);",
									"        jsonValueCheck(\"The value of key administeredGroups[data][\"+i+\"][type] should be groups\", jsonData.data.relationships.administeredGroups.data[i]['type'], \"groups\");",
									"    }",
									"    console.log(\"Group Ids: \"+groupIdArray);",
									"    ",
									"    //Number of objects in included array should be 6",
									"    //6 groups",
									"    jsonValueCheck(\"The number of objects in included array under response should be 6\", jsonData.included.length, 6);",
									"    ",
									"    //Verify groud ids and group names in included array",
									"    var groupNameArray = ['Rabbit Sanctuary', 'Flop-ear Families', 'Pot-bellied Pals', 'Bunny Buddies', 'Piggy Rescue', 'Dwarf Rabbit Disaster Recovery'];",
									"    var groupSlugArray = ['rabbit-sanctuary', 'flop-ear-families', 'pot-bellied-pals', 'bunny-buddies', 'piggy-rescue', 'dwarf-rabbit-disaster-recovery'];",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        jsonValueCheck(\"The group id's retrieved in response should match the group id's in included array\", jsonData.included[i]['id'], groupIdArray[i]);",
									"        jsonValueCheck(\"The group name \"+groupNameArray[i]+\" should match the group name in included array\", jsonData.included[i]['attributes']['name'], groupNameArray[i]);",
									"        jsonValueCheck(\"The group slug \"+groupSlugArray[i]+\" should match the group slug in included array\", jsonData.included[i]['attributes']['slug'], groupSlugArray[i]);",
									"    }",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=administeredGroups",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "administeredGroups"
								}
							]
						},
						"description": "Test for a user where the user is Admin for\n6 groups\n\nSeeded user id is 999000\nUser - api@chimp.net (Donor role)\nGroups - ['Rabbit Sanctuary', 'Flop-ear Families', 'Pot-bellied Pals', 'Bunny Buddies', 'Piggy Rescue', 'Dwarf Rabbit Disaster Recovery']\n\n\nTests\n-----\nSends a GET request with valid user Id and include parameter with administeredGroups\nExpects the response code to be 200\nExpects the response time within 500ms\nExpects the below keys in the response\n'data', id', 'type', 'links', 'attributes', 'relationships'\n'attributes'\n  'avatar', 'displayName', 'language', 'balance', 'activeRoleId', 'createdAt'\n'relationships'\n  'administeredGroups', 'administeredCampaigns', 'administeredCompanies', 'administeredBeneficiaries', 'beneficiaryAdminRoles', 'companyAdminRoles', 'donorRole', 'chimpAdminRole', 'activeRole'\n'included'\nExpects the number of objects to be 6 in 'included' array in response\nExpects the number of groups in the response to be 6\nExpects that the group ids retrieved under 'data' key in response should match the group ids in objects available under 'included' array in response\n\nExpects the below group names to be available in objects under 'included' array\n['Rabbit Sanctuary', 'Flop-ear Families', 'Pot-bellied Pals', 'Bunny Buddies', 'Piggy Rescue', 'Dwarf Rabbit Disaster Recovery']\nExpects the below group slugs to be available in objects under 'included' array\n['rabbit-sanctuary', 'flop-ear-families', 'pot-bellied-pals', 'bunny-buddies', 'piggy-rescue', 'dwarf-rabbit-disaster-recovery']\n\nChecks for data type of response, data types of some keys (balance)\nChecks for json value (user id, type, language, relationships types etc)\nChecks for user role and active role in data key\netc"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=administeredGroups - where user is not an owner of any group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "095e0101-6793-40f1-8bef-6c2250713d0d",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999010, this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999010\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "258f3716-0771-4b64-8302-098fe68299d1",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"//Status code check",
									"pm.test(\"Expecting status code to be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//JSON Content Test",
									"pm.test(\"Response should not contain 'included' key\", function () { ",
									"    pm.response.to.not.have.jsonBody(\"included\"); ",
									"});",
									"",
									"try {",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var key = 'data';",
									"    for (var i in jsonData){",
									"        validateTests(i, key);",
									"    }",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check value of data.type",
									"    jsonValueCheck(\"Value of key 'data[type]' should be users\", jsonData.data.type, \"users\");",
									"    ",
									"    //Verify if the following keys 'links', 'data' are available under 'jsonData.data.relationships.administeredGroups'",
									"    var subKeys = ['links', 'data'];",
									"    ",
									"    for (var i in jsonData.data.relationships.administeredGroups){",
									"        jsonValueCheck(\"Key 'jsonData.data.relationships.administeredGroups.\"+subKeys[subKeys.indexOf(i)]+\"' should be available in the response\", i, subKeys[subKeys.indexOf(i)]);",
									"    }",
									"    ",
									"    //Verify if the number of groups available is 0",
									"    jsonValueCheck(\"The number of groups available in the response should be 0\", jsonData.data.relationships.administeredGroups.data.length, 0);",
									"    ",
									"    //Check data type of key data.attributes.balance",
									"    //jsonValueCheck(\"Data type of of key 'data[attributes][balance]' should be number\", typeof(jsonData.data.attributes.balance), \"number\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999010}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=administeredGroups",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "administeredGroups"
								}
							]
						},
						"description": "Test for a user where the user is not an Admin for any groups but member of few groups\n\nSeeded user id - 999010\nUser here is not an admin of any groups\nUser here is member of few groups \n\nSends a GET request with valid user id with include parameter 'administeredGroups'\nExpects the response code to be 200\nExpects the response time within 500ms\nExpects that the key 'included' is not part of response since the user is not an admin of any groups\nExpects the below keys in the response\n'data', id', 'type', 'links', 'attributes', 'relationships'\n'attributes'\n  'avatar', 'displayName', 'language', 'balance', 'activeRoleId', 'createdAt'\n'relationships'\n  'administeredGroups', 'administeredCampaigns', 'administeredCompanies', 'administeredBeneficiaries', 'beneficiaryAdminRoles', 'companyAdminRoles', 'donorRole', 'chimpAdminRole', 'activeRole'\n\nExpects the userId to be the userId passed as part of request\nExpects the value of key 'data[type] to be 'users'\nExpects the value of key 'language' to be 'en'\nExpects the following keys 'links', 'data' to be under 'jsonData.data.relationships.administeredGroups'\nExpects the number of groups available in the response should be 0"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "678df3ac-fc9f-4963-8831-fc38d3c27dbf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d333540-3032-478c-83e9-aa2f0397ca19",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GIVEB-17 Header - GET Tax Receipt Profiles",
			"description": null,
			"item": [
				{
					"name": "/users/{{user_id}}?include=taxReceiptProfiles - with taxReceiptProfiles",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dbbf46a0-0fd7-4bc1-98e7-1002d51923e1",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be8e5f73-4efb-4ef9-9c34-7cd912a71525",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"//Status code check",
									"pm.test(\"Expecting status code to be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"try {",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var dataArray = ['id', 'type', 'links', 'attributes', 'relationships'];",
									"    for (var i in jsonData.data){",
									"        validateTests(i, dataArray[dataArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var attributesArray = ['avatar', 'displayName', 'language', 'balance', 'activeRoleId', 'createdAt'];",
									"    for (var i in jsonData.data.attributes){",
									"        validateTests(i, attributesArray[attributesArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check value of data.type",
									"    jsonValueCheck(\"Value of key 'data[type]' should be users\", jsonData.data.type, \"users\");",
									"    ",
									"    //Check data type of key data.relationships",
									"    jsonValueCheck(\"Data type of of key 'data' should be object\", typeof(jsonData.data), \"object\");",
									"    ",
									"    //Check value of data.attributes.language",
									"    jsonValueCheck(\"Value of key 'data[attributes][language]' should be 'en'\", jsonData.data.attributes.language, \"en\");",
									"    ",
									"    //Verify that 'jsonData.data.relationships.taxReceiptProfiles' have 'data' key",
									"    var subKeys = ['links', 'data'];",
									"    for (var i in jsonData.data.relationships.taxReceiptProfiles){",
									"        jsonValueCheck(\"The key(s) under 'jsonData.data.relationships.taxReceiptProfiles' should have 'links' and 'data' as keys\", i, subKeys[subKeys.indexOf(i)]);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The number of tax receipt profiles available in the response should be 3\", jsonData.data.relationships.taxReceiptProfiles.data.length, 3);",
									"    ",
									"    var taxReceiptProfilesIdArray = [];",
									"    //Verify that the value of \"taxReceiptProfiles[data][i][type]\" key is \"taxReceiptProfiles\"",
									"    for (var i in jsonData.data.relationships.taxReceiptProfiles.data){",
									"        taxReceiptProfilesIdArray.push(jsonData.data.relationships.taxReceiptProfiles.data[i]['id']);",
									"        jsonValueCheck(\"The value of key 'taxReceiptProfiles[data][\"+i+\"][type]' should be 'taxReceiptProfiles'\", jsonData.data.relationships.taxReceiptProfiles.data[i]['type'], \"taxReceiptProfiles\");",
									"    }",
									"    console.log(\"taxReceiptProfiles Ids: \"+taxReceiptProfilesIdArray);",
									"    ",
									"    //Number of objects in included array should be 3",
									"    //3 tax receipt Profiles",
									"    jsonValueCheck(\"The number of objects in included array under response should be 3\", jsonData.included.length, 3);",
									"    ",
									"    //Verify if the below keys are available in the object(s) under 'included' array",
									"    var objectKeyArray = ['id', 'type', 'links', 'attributes', 'relationships'];",
									"    var objectAttributesArray = ['fullName', 'addressOne', 'addressTwo', 'city', 'province', 'postalCode', 'country', 'accountNumber'];",
									"    var objectRelationshipsArray = ['accountHoldable'];",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        for (var j in jsonData.included[i]){",
									"            jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[\"+i+\"] should be \"+objectKeyArray[objectKeyArray.indexOf(j)], j, objectKeyArray[objectKeyArray.indexOf(j)]);",
									"        }",
									"        for (var j in jsonData.included[i]['attributes']){",
									"            jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[\"+i+\"]['attributes'] should be \"+objectAttributesArray[objectAttributesArray.indexOf(j)], j, objectAttributesArray[objectAttributesArray.indexOf(j)]);",
									"        }",
									"        for (var j in jsonData.included[i]['relationships']){",
									"            jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[\"+i+\"]['relationships'] should be \"+objectRelationshipsArray[objectRelationshipsArray.indexOf(j)], j, objectRelationshipsArray[objectRelationshipsArray.indexOf(j)]);",
									"        }",
									"    }",
									"    ",
									"    //Verify Tax Receipt Profile details [id, type, fullName, Adress & accountNumber]",
									"    //Verify Tax Receipt profile ids should match the ids retrieved from 'data' key from response",
									"    //Verify that the type of each object under included array is 'taxReceiptProfiles'",
									"    var expectedDetails = ['Johnny Canuck', 'Bob Hoskins', 'Bob Hoskins Junior' ];",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        jsonValueCheck(\"The tax receipt profiles id's retrieved in response should match the tax receipt profile id's in included array\", jsonData.included[i]['id'], taxReceiptProfilesIdArray[i]);",
									"        jsonValueCheck(\"The value of key 'jsonData.included[\"+i+\"][type]' should be 'taxReceiptProfiles'\", jsonData.included[i]['type'], \"taxReceiptProfiles\");",
									"        jsonValueCheck(\"The fullName retrieved from included array in response '\"+jsonData.included[i]['attributes']['fullName']+\"' should match the name  - \"+expectedDetails[i], jsonData.included[i]['attributes']['fullName'], expectedDetails[i]);",
									"    }",
									"    ",
									"    //Check data type of key data.attributes.balance",
									"    //jsonValueCheck(\"Data type of of key 'data[attributes][balance]' should be number\", typeof(jsonData.data.attributes.balance), \"number\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=taxReceiptProfiles",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "taxReceiptProfiles"
								}
							]
						},
						"description": "Test for a user where the user has 3 tax receipt profiles\n\nSeeded user id is 999000\nUser - api@chimp.net (Donor role)\nTax Receipt Profiles -\n\n\nTests\n-----\nSends a GET request with valid user Id and include parameter with all administered entities and roles\nExpects the response code to be 200\nExpects the response time within 500ms\nExpects the below keys in the response\n'data', id', 'type', 'links', 'attributes', 'relationships'\n'attributes'\n  'avatar', 'displayName', 'language', 'balance', 'activeRoleId', 'createdAt'\n'relationships'\n  'administeredGroups', 'administeredCampaigns', 'administeredCompanies', 'administeredBeneficiaries', 'beneficiaryAdminRoles', 'companyAdminRoles', 'donorRole', 'chimpAdminRole', 'activeRole', 'taxReceiptProfiles'\n'included'\nExpects the number of taxReceiptProfiles in the response to be 3\nExpects that the 'taxReceiptProfiles' object under 'data' key in response has 'links' and 'data' keys\nExpects that the value of \"taxReceiptProfiles[data][i][type]\" key to be \"taxReceiptProfiles\"\nExpects that the taxReceiptProfile ids retrieved under 'data' key in response should match the tax receipt profile ids in objects available under 'included' array in response\nExpects the number of objects to be 3 in 'included' array in response\nExpects that the value of \"included[i][type]\" key to be \"taxReceiptProfiles\"\nExpects the below keys in \"included[i]\"\n'id', 'type', 'links', 'attributes', 'relationships'\n'attributes'\n    'fullName', 'addressOne', 'addressTwo', 'city', 'province', 'postalCode', 'country', 'accountNumber'\n'relationships'    \n    'accountHoldable'\n\nExpects the below names to be available in objects under 'included' array\n[\"Johnny Canuck\", \"Bob Hoskins\", \"Bob Hoskins Junior\"]\n\nChecks for data type of response, data types of some keys (balance)\nChecks for json value (user id, type, language, relationships types etc)\n\netc"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=defaultTaxReceiptProfile - with defaultTaxReceiptProfile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dbbf46a0-0fd7-4bc1-98e7-1002d51923e1",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e7b88f51-bfc5-4cca-beed-ad6e86f50a50",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"//Status code check",
									"pm.test(\"Expecting status code to be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"try {",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check value of data.type",
									"    jsonValueCheck(\"Value of key 'data[type]' should be users\", jsonData.data.type, \"users\");",
									"    ",
									"    //Check data type of key data.relationships",
									"    jsonValueCheck(\"Data type of of key 'data' should be object\", typeof(jsonData.data), \"object\");",
									"    ",
									"    //Check value of data.attributes.language",
									"    /**/jsonValueCheck(\"Value of key 'data[attributes][language]' should be 'en'\", jsonData.data.attributes.language, \"en\");",
									"    ",
									"    //Verify that 'jsonData.data.relationships.taxReceiptProfiles' have 'data' key",
									"    var subKeys = ['links', 'data'];",
									"    for (var i in jsonData.data.relationships.defaultTaxReceiptProfile){",
									"        jsonValueCheck(\"The key(s) under 'jsonData.data.relationships.defaultTaxReceiptProfile' should have 'links' and 'data' as keys\", i, subKeys[subKeys.indexOf(i)]);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The default tax receipt profile in response should only be 1 i.e, data type of 'jsonData.data.relationships.defaultTaxReceiptProfile.data' should be an object\", typeof(jsonData.data.relationships.defaultTaxReceiptProfile.data), \"object\");",
									"    ",
									"    jsonValueCheck(\"The value of key 'jsonData.data.relationships.defaultTaxReceiptProfile.data['type']' should be 'taxReceiptProfiles'\", jsonData.data.relationships.defaultTaxReceiptProfile.data['type'], \"taxReceiptProfiles\");",
									"    ",
									"    jsonValueCheck(\"The number of objects in included array under response should be 1\", jsonData.included.length, 1);",
									"    ",
									"    var defaultTaxReceiptId = jsonData.data.relationships.defaultTaxReceiptProfile.data['id'];",
									"    jsonValueCheck(\"The default tax receipt id retrieved in response should match the id in object under included array\", jsonData.included[0]['id'], defaultTaxReceiptId);",
									"    ",
									"    jsonValueCheck(\"The value of key 'jsonData.included[0]['type']' should be 'taxReceiptProfiles'\", jsonData.included[0]['type'], \"taxReceiptProfiles\");",
									"    ",
									"    //Verify if the below keys are available in the object(s) under 'included' array",
									"    var objectKeyArray = ['id', 'type', 'links', 'attributes', 'relationships'];",
									"    var objectAttributesArray = ['fullName', 'addressOne', 'addressTwo', 'city', 'province', 'postalCode', 'country', 'accountNumber'];",
									"    var objectRelationshipsArray = ['accountHoldable'];",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        for (var j in jsonData.included[i]){",
									"            jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[\"+i+\"] should be \"+objectKeyArray[objectKeyArray.indexOf(j)], j, objectKeyArray[objectKeyArray.indexOf(j)]);",
									"        }",
									"        for (var j in jsonData.included[i]['attributes']){",
									"            jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[\"+i+\"]['attributes'] should be \"+objectAttributesArray[objectAttributesArray.indexOf(j)], j, objectAttributesArray[objectAttributesArray.indexOf(j)]);",
									"        }",
									"        for (var j in jsonData.included[i]['relationships']){",
									"            jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[\"+i+\"]['relationships'] should be \"+objectRelationshipsArray[objectRelationshipsArray.indexOf(j)], j, objectRelationshipsArray[objectRelationshipsArray.indexOf(j)]);",
									"        }",
									"    }",
									"    ",
									"    var expectedDetails = ['Bob Hoskins'];",
									"    ",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        jsonValueCheck(\"The fullName retrieved from included array in response '\"+jsonData.included[i]['attributes']['fullName']+\"' should match the name  - \"+expectedDetails[i], jsonData.included[i]['attributes']['fullName'], expectedDetails[i]);",
									"    }",
									"    ",
									"    //Check data type of key data.attributes.balance",
									"    //jsonValueCheck(\"Data type of of key 'data[attributes][balance]' should be number\", typeof(jsonData.data.attributes.balance), \"number\");",
									"    ",
									"    //Check data type of key data.attributes",
									"    jsonValueCheck(\"Data type of of key 'data[attributes]' should be object\", typeof(jsonData.data.attributes), \"object\");",
									"    ",
									"    //Check data type of key data.relationships",
									"    jsonValueCheck(\"Data type of of key 'data[relationships]' should be object\", typeof(jsonData.data.relationships), \"object\");",
									"    ",
									"    //Check data type of data under data.relationships",
									"    for (var i in jsonData.data.relationships){",
									"        jsonValueCheck(\"Data type of of key '\"+i+\"' should be object\", typeof(jsonData.data.relationships[i]), \"object\");    ",
									"    }",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=defaultTaxReceiptProfile",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "defaultTaxReceiptProfile"
								}
							]
						},
						"description": "Test for a user where the user has 3 tax receipt profiles\nSeeded user id is 999000 User - api@chimp.net (Donor role) \nTax Receipt Profiles -\nDefault Tax Receipt Profile - \n\nTests\nSends a GET request with valid user Id and include parameter with defaultTaxReceiptProfiles\nExpects the response code to be 200 \nExpects the response time within 500ms \nExpects the below keys in the response \n'data', id', 'type', 'links', 'attributes', 'relationships' \n'attributes' \n'avatar', 'displayName', 'language', 'balance', 'activeRoleId', 'createdAt' \n'relationships' \n'administeredGroups', 'administeredCampaigns', 'administeredCompanies', 'administeredBeneficiaries', 'beneficiaryAdminRoles', 'companyAdminRoles', 'donorRole', 'chimpAdminRole', 'activeRole', 'taxReceiptProfiles', 'defaultTaxReceiptProfile' \n'included'\nExpects that the 'taxReceiptProfiles' object under 'data' key in response has 'links' and 'data' keys\nExpects the number of defaultTaxReceiptProfile in the response to be 1\nExpects that the value of \"defaultTaxReceiptProfile[data][i][type]\" key to be \"taxReceiptProfiles\"\nExpects that the defaultTaxReceiptProfile id retrieved under 'data' key in response should match the id in object available under 'included' array in response\nExpects the number of objects to be 1 in 'included' array in response\nExpects that the value of \"included[0][type]\" key to be \"taxReceiptProfiles\"\nExpects the below keys in \"included[0]\"\n'id', 'type', 'links', 'attributes', 'relationships'\n'attributes'\n    'fullName', 'addressOne', 'addressTwo', 'city', 'province', 'postalCode', 'country', 'accountNumber'\n'relationships'\n    'accountHoldable'\n\nExpects the below name to be available in object under 'included' array in response\n[\"Johnny Canuck\"]"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=taxReceiptProfiles - user does not have any taxReceiptProfiles",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "793f75f3-eb5c-4492-9423-69054ca3b5d3",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999030 , this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999030\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b546b3b-893a-493e-b618-c8907aeeb8c7",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"//Status code check",
									"pm.test(\"Expecting status code to be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should not contain 'included' key\", function () { ",
									"    pm.response.to.not.have.jsonBody(\"included\"); ",
									"});",
									"",
									"try {",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    pm.test(\"Header content type check\", function () {",
									"        pm.expect(postman.getResponseHeader(\"content-Type\")).to.equal(\"application/vnd.api+json; charset=utf-8\");",
									"    });",
									"    ",
									"    //Checking if data key is available in response",
									"    var keyArray = ['data'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check value of data.type",
									"    jsonValueCheck(\"Value of key 'data[type]' should be users\", jsonData.data.type, \"users\");",
									"    ",
									"    //Check data type of key data.relationships",
									"    jsonValueCheck(\"Data type of of key 'data' should be object\", typeof(jsonData.data), \"object\");",
									"    ",
									"    //Check value of data.attributes.language",
									"    //jsonValueCheck(\"Value of key 'data[attributes][language]' should be 'en'\", jsonData.data.attributes.language, \"en\");",
									"    ",
									"    //Verify that 'jsonData.data.relationships.taxReceiptProfiles' have 'data' key",
									"    var subKeys = ['links', 'data'];",
									"    for (var i in jsonData.data.relationships.taxReceiptProfiles){",
									"        jsonValueCheck(\"The key(s) under 'jsonData.data.relationships.taxReceiptProfiles' should have 'links' and 'data' as keys\", i, subKeys[subKeys.indexOf(i)]);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The number of tax receipt profiles available in the response should be 0\", jsonData.data.relationships.taxReceiptProfiles.data.length, 0);",
									"    ",
									"    //Check data type of key data.attributes.balance",
									"    //jsonValueCheck(\"Data type of of key 'data[attributes][balance]' should be number\", typeof(jsonData.data.attributes.balance), \"number\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999030}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=taxReceiptProfiles",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "taxReceiptProfiles"
								}
							]
						},
						"description": "Test for a user where the user does not have tax receipt profiles\n\nSeeded user id is 32\n\n\nTests\n-----\nSends a GET request with valid user Id and include parameter with taxReceiptProfiles\n\n\nExpecting status code to be 200\n\nResponse should be json\n\nResponse time shoule be less than 500ms\n\nHeader content type check\n\nResponse should not contain 'included' key\n\nThe key(s) under 'jsonData.data.relationships.taxReceiptProfiles' should have 'links' and 'data' as keys\n\nThe number of tax receipt profiles available in the response should be 0\n\nUser Id in response should match the user Id passed\n\nValue of key 'data[type]' should be users\n\nData type of of key 'data' should be object\n\nValue of key 'data[attributes][language]' should be 'en' \n\nData type of of key 'data[attributes][balance]' should be number \n\n'data' key should be available in response\n\n'id' key should be available in response\n\n'type' key should be available in response\n\n'links' key should be available in response\n\n'attributes' key should be available in response\n\n'relationships' key should be available in response\n\n'avatar' key should be available in response\n\n'displayName' key should be available in response\n\n'language' key should be available in response\n\n'balance' key should be available in response\n\n'activeRoleId' key should be available in response\n\n'createdAt' key should be available in response\n\nKey 'administeredGroups'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'administeredCampaigns'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'administeredCompanies'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'administeredBeneficiaries'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'taxReceiptProfiles'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'beneficiaryAdminRoles'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'companyAdminRoles'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'donorRole'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'chimpAdminRole'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'activeRole'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'defaultTaxReceiptProfile'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nData type of of key 'data[attributes]' should be object\n\nData type of of key 'data[relationships]' should be object\n\nData type of of key 'administeredGroups' should be object\n\nData type of of key 'administeredCampaigns' should be object\n\nData type of of key 'administeredCompanies' should be object\n\nData type of of key 'administeredBeneficiaries' should be object\n\nData type of of key 'taxReceiptProfiles' should be object\n\nData type of of key 'beneficiaryAdminRoles' should be object\n\nData type of of key 'companyAdminRoles' should be object\n\nData type of of key 'donorRole' should be object\n\nData type of of key 'chimpAdminRole' should be object\n\nData type of of key 'activeRole' should be object\n\nData type of of key 'defaultTaxReceiptProfile' should be object"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=defaultTaxReceiptProfile - user does not have defaultTaxReceiptProfile",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aefd781b-7e77-4889-91c7-23597484ff33",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999030, this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999030\");",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1508912e-e118-4a45-a18d-b126d0fa5f1f",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"//Status code check",
									"pm.test(\"Expecting status code to be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should not contain 'included' key\", function () { ",
									"    pm.response.to.not.have.jsonBody(\"included\"); ",
									"});",
									"",
									"try {",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data key is available in response",
									"    var keyArray = ['data'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check value of data.type",
									"    jsonValueCheck(\"Value of key 'data[type]' should be users\", jsonData.data.type, \"users\");",
									"    ",
									"    //Check data type of key data.relationships",
									"    jsonValueCheck(\"Data type of of key 'data' should be object\", typeof(jsonData.data), \"object\");",
									"    ",
									"    //Check value of data.attributes.language",
									"    //jsonValueCheck(\"Value of key 'data[attributes][language]' should be 'en'\", jsonData.data.attributes.language, \"en\");",
									"    ",
									"    //Verify that 'jsonData.data.relationships.taxReceiptProfiles' have 'data' key",
									"    var subKeys = ['links', 'data'];",
									"    for (var i in jsonData.data.relationships.defaultTaxReceiptProfile){",
									"        jsonValueCheck(\"The key(s) under 'jsonData.data.relationships.defaultTaxReceiptProfile' should have 'links' and 'data' as keys\", i, subKeys[subKeys.indexOf(i)]);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The value of key 'jsonData.data.relationships.defaultTaxReceiptProfile.data' should be an null\", jsonData.data.relationships.defaultTaxReceiptProfile.data, null);",
									"    ",
									"    //Check data type of key data.attributes.balance",
									"    //jsonValueCheck(\"Data type of of key 'data[attributes][balance]' should be number\", typeof(jsonData.data.attributes.balance), \"number\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999030}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=defaultTaxReceiptProfile",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "defaultTaxReceiptProfile"
								}
							]
						},
						"description": "Test for a user where the user does not have defaultTaxReceiptProfile\nSeeded user id is 32\n\n\nTests\n\nExpecting status code to be 200\n\nResponse should not contain 'included' key\n\nResponse should be json\n\nResponse time shoule be less than 500ms\n\nThe key(s) under 'jsonData.data.relationships.defaultTaxReceiptProfile' should have 'links' and 'data' as keys\n\nThe value of key 'jsonData.data.relationships.defaultTaxReceiptProfile.data' should be an null as there is no default tax receipt for this user\n\nHeader content type check\n\n'data' key should be available in response\n\n'id' key should be available in response\n\n'type' key should be available in response\n\n'links' key should be available in response\n\n'attributes' key should be available in response\n\n'relationships' key should be available in response\n\n'avatar' key should be available in response\n\n'displayName' key should be available in response\n\n'language' key should be available in response\n\n'balance' key should be available in response\n\n'activeRoleId' key should be available in response\n\n'createdAt' key should be available in response\n\nKey 'administeredGroups'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'administeredCampaigns'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'administeredCompanies'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'administeredBeneficiaries'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'taxReceiptProfiles'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'beneficiaryAdminRoles'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'companyAdminRoles'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'donorRole'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'chimpAdminRole'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'activeRole'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nKey 'defaultTaxReceiptProfile'retrieved from response 'jsonData.data.relationships' should be an element of array: administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,beneficiaryAdminRoles,companyAdminRoles,donorRole,chimpAdminRole,activeRole,taxReceiptProfiles,defaultTaxReceiptProfile\n\nUser Id in response should match the user Id ed\n\nValue of key 'data[type]' should be users\n\nData type of of key 'data' should be object\n\nValue of key 'data[attributes][language]' should be 'en'\n\nData type of of key 'data[attributes][balance]' should be number\n\nData type of of key 'data[attributes]' should be object\n\nData type of of key 'data[relationships]' should be object\n\nData type of of key 'administeredGroups' should be object\n\nData type of of key 'administeredCampaigns' should be object\n\nData type of of key 'administeredCompanies' should be object\n\nData type of of key 'administeredBeneficiaries' should be object\n\nData type of of key 'taxReceiptProfiles' should be object\n\nData type of of key 'beneficiaryAdminRoles' should be object\n\nData type of of key 'companyAdminRoles' should be object\n\nData type of of key 'donorRole' should be object\n\nData type of of key 'chimpAdminRole' should be object\n\nData type of of key 'activeRole' should be object\n\nData type of of key 'defaultTaxReceiptProfile' should be object"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - with invalid end point",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5d129300-3db2-4f86-b40f-60cb67d92572",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7ce403c-617c-49e1-855b-0d4aea429e43",
								"type": "text/javascript",
								"exec": [
									"//Status code check",
									"pm.test(\"Expecting status code to be 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The response should contain 'error' key\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"error\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/user/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"user",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with valid user id (seeded user- 999000) but invalid end point\nExpects status code to be 404\nExpects response time within 500ms\nExpects response type to be an object"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0f5f2140-9bb3-4d22-b53a-d56565677eb3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e43cd205-40f2-4e5f-95cc-8af54e901573",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GIVEB-18 API: Users - GET PaymentInstrument",
			"description": null,
			"item": [
				{
					"name": "/users/{{user_id}}?include=paymentInstruments - with paymentInstruments",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "af73ae42-35e7-451e-a915-1ede58dbb49e",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc673fbb-4e58-46cf-9e91-96eec19027fe",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"//Status code check",
									"pm.test(\"Expecting status code to be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"try {",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check value of data.attributes.language",
									"    jsonValueCheck(\"Value of key 'data[attributes][language]' should be 'en'\", jsonData.data.attributes.language, \"en\");",
									"    ",
									"    //Verify that 'jsonData.data.relationships.paymentInstruments' have 'data' key",
									"    var subKeys = ['links', 'data'];",
									"    for (var i in jsonData.data.relationships.paymentInstruments){",
									"        jsonValueCheck(\"The key(s) under 'jsonData.data.relationships.paymentInstruments' should have 'links' and 'data' as keys\", i, subKeys[subKeys.indexOf(i)]);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The number of payment instruments available in the response should be 6\", jsonData.data.relationships.paymentInstruments.data.length, 6);",
									"    ",
									"    var paymentInstrumentId = jsonData.data.relationships.paymentInstruments.data[0]['id'];",
									"    ",
									"    jsonValueCheck(\"The value of key 'jsonData.data.relationships.paymentInstruments.data[0]['type']' should be 'paymentInstruments'\", jsonData.data.relationships.paymentInstruments.data[0]['type'], \"paymentInstruments\");",
									"    ",
									"    ",
									"    //Number of objects in included array should be 1",
									"    //1 Payment Instrument",
									"    jsonValueCheck(\"The number of object(s) in included array under response should be 6\", jsonData.included.length, 6);",
									"    ",
									"    //Verify if the below keys are available in the object(s) under 'included' array",
									"    var objectKeyArray = ['id', 'type', 'links', 'attributes', 'relationships'];",
									"    var objectAttributesArray = ['description', 'createdAt', 'instrumentType'];",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        for (var j in jsonData.included[i]){",
									"            jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[\"+i+\"] should be \"+objectKeyArray[objectKeyArray.indexOf(j)], j, objectKeyArray[objectKeyArray.indexOf(j)]);",
									"        }",
									"        for (var j in jsonData.included[i]['attributes']){",
									"            jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[\"+i+\"]['attributes'] should be \"+objectAttributesArray[objectAttributesArray.indexOf(j)], j, objectAttributesArray[objectAttributesArray.indexOf(j)]);",
									"        }",
									"    }",
									"    ",
									"    var expectedDescription = \"StripeMock Visa ending in 4242\";",
									"    ",
									"    jsonValueCheck(\"The paymentInstrument Id retrieved in response should match the paymentInstrument Id in included array\", jsonData.included[0]['id'], paymentInstrumentId);",
									"    jsonValueCheck(\"The value of key 'jsonData.included[0]['type']' should be 'paymentInstruments'\", jsonData.included[0]['type'], \"paymentInstruments\");",
									"    jsonValueCheck(\"The value of key 'jsonData.included[0]['attributes']['instrumentType']' should be 'StripeCardInstrument'\", jsonData.included[0]['attributes']['instrumentType'], \"StripeCardInstrument\");",
									"    jsonValueCheck(\"The value of key 'jsonData.included[0]['attributes']['description']' should be - \"+expectedDescription, jsonData.included[0]['attributes']['description'], expectedDescription);",
									"    ",
									"    //Check data type of key data.attributes.balance",
									"    //jsonValueCheck(\"Data type of of key 'data[attributes][balance]' should be number\", typeof(jsonData.data.attributes.balance), \"number\");",
									"    ",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=paymentInstruments",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "paymentInstruments"
								}
							]
						},
						"description": "### Test for a user where the user has one payment Instrument\n\nSeeded user id is 999000  \nUser - api@chimp.net (Donor role)  \n\nSends a GET request with include parament paymentInstruments\n\nExpecting status code to be 200\n\nResponse should be json\n\nResponse time shoule be less than 500ms\n\n'paymentInstruments' key should be available in response\n\nData type of of key 'paymentInstruments' should be object\n\nThe key(s) under 'jsonData.data.relationships.paymentInstruments' should have 'links' and 'data' as keys\n\nThe number of payment instruments available in the response should be 1\n\nThe value of key 'jsonData.data.relationships.paymentInstruments.data[0]['type']' should be 'paymentInstruments'\n\nThe number of object(s) in included array under response should be 1\n\nKey 'id' retrieved from jsonData.included[0] should be id\n\nKey 'type' retrieved from jsonData.included[0] should be type\n\nKey 'links' retrieved from jsonData.included[0] should be links\n\nKey 'attributes' retrieved from jsonData.included[0] should be attributes\n\nKey 'description' retrieved from jsonData.included[0]['attributes'] should be description\n\nKey 'createdAt' retrieved from jsonData.included[0]['attributes'] should be createdAt\n\nKey 'instrumentType' retrieved from jsonData.included[0]['attributes'] should be instrumentType\n\nThe paymentInstrument Id retrieved in response should match the paymentInstrument Id in included array\n\nThe value of key 'jsonData.included[0]['type']' should be 'paymentInstruments'\n\nThe value of key 'jsonData.included[0]['attributes']['instrumentType']' should be 'StripeCardInstrument'\n\nThe value of key 'jsonData.included[0]['attributes']['description']' should be - StripeMock Visa ending in 4242\n\n--------------------------------------------------------------------------------------------\n\nHeader content type check\n\n'data' key should be available in response\n\n'included' key should be available in response\n\n'id' key should be available in response\n\n'type' key should be available in response\n\n'links' key should be available in response\n\n'attributes' key should be available in response\n\n'relationships' key should be available in response\n\n'avatar' key should be available in response\n\n'displayName' key should be available in response\n\n'language' key should be available in response\n\n'balance' key should be available in response\n\n'activeRoleId' key should be available in response\n\n'createdAt' key should be available in response\n\n'administeredGroups' key should be available in response\n\n'administeredCampaigns' key should be available in response\n\n'administeredCompanies' key should be available in response\n\n'administeredBeneficiaries' key should be available in response\n\n'beneficiaryAdminRoles' key should be available in response\n\n'companyAdminRoles' key should be available in response\n\n'donorRole' key should be available in response\n\n'chimpAdminRole' key should be available in response\n\n'activeRole' key should be available in response\n\nUser Id in response should match the user Id ed\n\nValue of key 'data[type]' should be users\n\nData type of of key 'data' should be object\n\nData type of of key 'data[attributes][balance]' should be number\n\nValue of key 'data[attributes][language]' should be 'en'\n\n\nData type of of key 'data[attributes]' should be object\n\nData type of of key 'data[relationships]' should be object\n\nData type of of key 'administeredGroups' should be object\n\nData type of of key 'administeredCampaigns' should be object\n\nData type of of key 'administeredCompanies' should be object\n\nData type of of key 'administeredBeneficiaries' should be object\n\nData type of of key 'beneficiaryAdminRoles' should be object\n\nData type of of key 'companyAdminRoles' should be object\n\nData type of of key 'donorRole' should be object\n\nData type of of key 'chimpAdminRole' should be object\n\nData type of of key 'activeRole' should be object"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=paymentInstruments - with paymentInstruments where user does not have any payment instrument",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cbcfc62d-108d-4ef7-bf89-9f9021fa0e28",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999030, this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999030\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a64156e-5519-4b3d-b6c6-c896017e8325",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"//Status code check",
									"pm.test(\"Expecting status code to be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//JSON Content Test",
									"pm.test(\"Response should not contain 'included' key\", function () { ",
									"    pm.response.to.not.have.jsonBody(\"included\"); ",
									"});",
									"",
									"try {",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var key = 'data';",
									"    for (var i in jsonData){",
									"        validateTests(i, key);",
									"    }",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check value of data.type",
									"    jsonValueCheck(\"Value of key 'data[type]' should be users\", jsonData.data.type, \"users\");",
									"    ",
									"    ",
									"    //Verify that 'jsonData.data.relationships.paymentInstruments' have 'data' key",
									"    var subKeys = ['links', 'data'];",
									"    for (var i in jsonData.data.relationships.paymentInstruments){",
									"        jsonValueCheck(\"The key(s) under 'jsonData.data.relationships.paymentInstruments' should have 'links' and 'data' as keys\", i, subKeys[subKeys.indexOf(i)]);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The number of payment instruments available in the response should be 0\", jsonData.data.relationships.paymentInstruments.data.length, 0);",
									"    ",
									"    //Check data type of key data.attributes.balance",
									"    //jsonValueCheck(\"Data type of of key 'data[attributes][balance]' should be number\", typeof(jsonData.data.attributes.balance), \"number\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999030}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=paymentInstruments",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "paymentInstruments"
								}
							]
						},
						"description": "Test for a user where the user has one payment Instrument\n\nSeeded user id - 32\ndev@chimp.net\n\nSends a GET request with valid user id with include parameter 'paymentInstruments'\nExpecting status code to be 200\n\nResponse time shoule be less than 500ms\n\nResponse should not contain 'included' key\n\nResponse should be json\n\n'paymentInstruments' key should be available in response\n\nThe key(s) under 'jsonData.data.relationships.paymentInstruments' should have 'links' and 'data' as keys\n\nThe number of payment instruments available in the response should be 0\n\nData type of of key 'paymentInstruments' should be object\n\n------------------------------------------------------------------------------------\n\nHeader content type check\n\n'data' key should be available in response\n\n'id' key should be available in response\n\n'type' key should be available in response\n\n'links' key should be available in response\n\n'attributes' key should be available in response\n\n'relationships' key should be available in response\n\n'avatar' key should be available in response\n\n'displayName' key should be available in response\n\n'language' key should be available in response\n\n'balance' key should be available in response\n\n'activeRoleId' key should be available in response\n\n'createdAt' key should be available in response\n\n'administeredGroups' key should be available in response\n\n'administeredCampaigns' key should be available in response\n\n'administeredCompanies' key should be available in response\n\n'administeredBeneficiaries' key should be available in response\n\n'beneficiaryAdminRoles' key should be available in response\n\n'companyAdminRoles' key should be available in response\n\n'donorRole' key should be available in response\n\n'chimpAdminRole' key should be available in response\n\n'activeRole' key should be available in response\n\nUser Id in response should match the user Id ed\n\nValue of key 'data[type]' should be users\n\nValue of key 'data[attributes][language]' should be 'en'\n\nData type of of key 'data' should be object\n\nData type of of key 'data[attributes]' should be object\n\nData type of of key 'data[relationships]' should be object\n\nData type of of key 'administeredGroups' should be object\n\nData type of of key 'administeredCampaigns' should be object\n\nData type of of key 'administeredCompanies' should be object\n\nData type of of key 'administeredBeneficiaries' should be object\n\nData type of of key 'beneficiaryAdminRoles' should be object\n\nData type of of key 'companyAdminRoles' should be object\n\nData type of of key 'donorRole' should be object\n\nData type of of key 'chimpAdminRole' should be object\n\nData type of of key 'activeRole' should be object"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "678df3ac-fc9f-4963-8831-fc38d3c27dbf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d333540-3032-478c-83e9-aa2f0397ca19",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GIVEB-19 API: Users - GET Matching Funds",
			"description": null,
			"item": [
				{
					"name": "/users/{{user_id}}?include=employedCompanies,enabledEmployeeRoles - with employedCompanies,enabledEmployeeRoles",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dbbf46a0-0fd7-4bc1-98e7-1002d51923e1",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95562095-1429-47d2-942f-a0425be4697f",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var expectedCompanyNames = ['Acme Company', 'Cement Co', 'Chimp Community', 'Globex Corporation', 'Nike', 'Reebok', 'Soylent Corp', 'Supermarket 4 U', 'The Codfather', 'Wok & Roll'];",
									"    var expectedPolicyPercentage = [null,45,95,33,null,45,15,null,33,15];",
									"    var expectedPolicyPeriod = ['month','month','month','month','month','month','month','month','month','month'];",
									"    var expectedObjectType = ['companies','companies','companies','companies','companies','companies','companies','companies','companies','companies'];",
									"    var relationshipsArray =['administeredGroups', 'administeredCampaigns', 'administeredCompanies', 'administeredBeneficiaries', 'beneficiaryAdminRoles', 'companyAdminRoles', 'donorRole', 'chimpAdminRole', 'activeRole', 'employedCompanies', 'enabledEmployeeRoles','taxReceiptProfiles','paymentInstruments','defaultTaxReceiptProfile','fund', 'donationMatchPolicies'];",
									"    for (var i in jsonData.data.relationships){",
									"        jsonValueCheck(\"Key '\"+i+\"'retrieved from response 'jsonData.data.relationships' should be an element of array: \"+relationshipsArray, relationshipsArray.includes(i), true);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The number of employedCompanies available in the response should be \"+expectedCompanyNames.length, jsonData.data.relationships.employedCompanies.data.length, expectedCompanyNames.length);",
									"    ",
									"    jsonValueCheck(\"The number of enabledEmployeeRoles available in the response should be \"+expectedCompanyNames.length, jsonData.data.relationships.enabledEmployeeRoles.data.length, expectedCompanyNames.length);",
									"    ",
									"    var employedCompaniesIdArray = [];",
									"    for (var i in jsonData.data.relationships.employedCompanies.data){",
									"        employedCompaniesIdArray.push(jsonData.data.relationships.employedCompanies.data[i]['id']);",
									"    }",
									"    console.log(\"employedCompanies Ids: \"+employedCompaniesIdArray);",
									"    ",
									"    //Verify that the value of \"employedCompanies[data][i][type]\" key is \"companies\"",
									"    jsonValueCheck(\"The value of key employedCompanies[data][0][type] should be companies\", jsonData.data.relationships.employedCompanies.data[0]['type'], \"companies\");",
									"    ",
									"    var enabledEmployeeRolesIdArray = [];",
									"    for (var i in jsonData.data.relationships.enabledEmployeeRoles.data){",
									"        enabledEmployeeRolesIdArray.push(jsonData.data.relationships.enabledEmployeeRoles.data[i]['id']);",
									"    }",
									"    console.log(\"enabledEmployeeRoles Ids: \"+enabledEmployeeRolesIdArray);",
									"    ",
									"    //Verify that the value of \"enabledEmployeeRoles[data][i][type]\" key is \"roles\"",
									"    jsonValueCheck(\"The value of key enabledEmployeeRoles[data][0][type] should be roles\", jsonData.data.relationships.enabledEmployeeRoles.data[0]['type'], \"roles\");",
									"    ",
									"    //Number of objects in included array should be 18",
									"    //9 employedCompanies + 9 enabledEmployeeRoles",
									"    var totLength=expectedCompanyNames.length + expectedCompanyNames.length",
									"    jsonValueCheck(\"The number of objects in included array under response should be \"+totLength, jsonData.included.length, totLength);",
									"    ",
									"    //Verify if the below keys are available in the object(s) of type companies under 'included' array",
									"    var objectKeyArray = ['id', 'type', 'links', 'attributes'];",
									"    var expectedKeysCompanies = ['avatar', 'name', 'policyPercentage', 'policyMax', 'policyPeriod', 'automaticMatching', 'banner', 'communityType', 'balance', 'slug', 'createdAt', 'companyFundId', 'companyFundName'];",
									"    for (var j in jsonData.included[0]){",
									"        jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[0] should be \"+objectKeyArray[objectKeyArray.indexOf(j)], j, objectKeyArray[objectKeyArray.indexOf(j)]);",
									"    }",
									"    for (var j in jsonData.included[0]['attributes']){",
									"        jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[0]['attributes'] should be \"+expectedKeysCompanies[expectedKeysCompanies.indexOf(j)], j, expectedKeysCompanies[expectedKeysCompanies.indexOf(j)]);",
									"    }",
									"    ",
									"    //Verify if the below keys are available in the object(s) of type EmployeeRole under 'included' array",
									"    var expectedKeysEmployeeRole = ['roleType', 'beneficiaryId', 'groupId', 'companyId', 'createdAt'];",
									"    for (var j in jsonData.included[17]){ //last element of array should contain enabledEmployeeRole object",
									"        jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[17] should be \"+objectKeyArray[objectKeyArray.indexOf(j)], j, objectKeyArray[objectKeyArray.indexOf(j)]);",
									"    }",
									"    for (var j in jsonData.included[17]['attributes']){",
									"        jsonValueCheck(\"Key '\"+j+\"' retrieved from jsonData.included[17]['attributes'] should be \"+expectedKeysEmployeeRole[expectedKeysEmployeeRole.indexOf(j)], j, expectedKeysEmployeeRole[expectedKeysEmployeeRole.indexOf(j)]);",
									"    }",
									"",
									"    //Verify matching fund names and matching policy amount ($/mo, $/yr)",
									"    ",
									"    ",
									"    var actualCompanyIds = [];",
									"    var actualCompanyNames = [];",
									"    var actualPolicyPercentage = [];",
									"    var actualPolicyMax = [];",
									"    var actualPolicyPeriod = [];",
									"    var actualObjectType = [];",
									"    ",
									"    for (var i=0; i<expectedCompanyNames.length; i++){",
									"        actualCompanyIds.push(jsonData.included[i]['id']);",
									"        actualObjectType.push(jsonData.included[i]['type']);",
									"        actualCompanyNames.push(jsonData.included[i]['attributes']['name']);",
									"        actualPolicyPercentage.push(jsonData.included[i]['attributes']['policyPercentage']);",
									"        actualPolicyMax.push(jsonData.included[i]['attributes']['policyMax']);",
									"        actualPolicyPeriod.push(jsonData.included[i]['attributes']['policyPeriod']);",
									"    }",
									"    console.log(\"actpolmax === >\"+JSON.stringify(actualPolicyMax));",
									"    ",
									"    jsonValueCheck(\"Company id's retrieved under included array in response should match id's retreived from 'data' kay in response\", JSON.stringify(actualCompanyIds)===JSON.stringify(employedCompaniesIdArray), true);",
									"    jsonValueCheck(\"The value of key 'type' under 'included' array in response should be 'companies'\", JSON.stringify(actualObjectType)===JSON.stringify(expectedObjectType), true);",
									"    jsonValueCheck(\"Company names retrieved from 'included' array in response should match the expected company names\", JSON.stringify(actualCompanyNames)===JSON.stringify(expectedCompanyNames), true);",
									"    // jsonValueCheck(\"Policy Percentage retrieved from 'included' array in response should match the expected policy percentage\", JSON.stringify(actualPolicyPercentage)===JSON.stringify(expectedPolicyPercentage), true);",
									"    // jsonValueCheck(\"Policy Max retrieved from 'included' array in response should match the expected policy max\", JSON.stringify(actualPolicyMax)===JSON.stringify(expectedPolicyMax), true);",
									"    jsonValueCheck(\"Policy Period retrieved from 'included' array in response should match the expected policy period\", JSON.stringify(actualPolicyPeriod)===JSON.stringify(expectedPolicyPeriod), true);",
									"    ",
									"    var expectedObject2Type = [];",
									"    var expectedroleType = [];",
									"    for(var i=0 ; i < expectedCompanyNames.length ; i++){",
									"        expectedroleType[i]='EmployeeRole';",
									"        expectedObject2Type[i]='roles';",
									"    }",
									"    ",
									"    ",
									"    var actualEmployeeRoleIds = [];",
									"    var actualObject2Type = [];",
									"    var actualroleType = [];",
									"    ",
									"    for (var i=10; i<jsonData.included.length; i++){",
									"        actualEmployeeRoleIds.push(jsonData.included[i]['id']);",
									"        actualObject2Type.push(jsonData.included[i]['type']);",
									"        actualroleType.push(jsonData.included[i]['attributes']['roleType']);",
									"    }",
									"    ",
									"    jsonValueCheck(\"EmployeeRoleIds id's retrieved under included array in response should match id's retreived from 'data' kay in response\", JSON.stringify(actualEmployeeRoleIds)===JSON.stringify(actualEmployeeRoleIds), true);",
									"    jsonValueCheck(\"The value of key 'type' under 'included' array in response should be 'roles'\", JSON.stringify(actualObject2Type)===JSON.stringify(expectedObject2Type), true);",
									"    jsonValueCheck(\"The value of key 'roleType' under 'included' array in response should be 'EmployeeRole'\", JSON.stringify(actualroleType)===JSON.stringify(expectedroleType), true);",
									"    ",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=employedCompanies,enabledEmployeeRoles",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "employedCompanies,enabledEmployeeRoles"
								}
							]
						},
						"description": "### Test for a user where the user is Admin for  \n- 6 companies  \n### Employee of \n- 3 companies\n### Having\n- 9 Employee Roles\n\nSeeded user id is 999000  \nUser - api@chimp.net (Donor role)  \n\n### Tests  \nSends a GET request with valid user Id and include parameter with employedCompanies and enabledEmployeeRoles  \n\nExpects the response code to be 200  \n\nExpects the response time within 500ms  \n\nExpects the below keys in the response  \n'data' & 'included'\n\n'relationships' \n     'administeredGroups', 'administeredCampaigns', 'administeredCompanies', 'administeredBeneficiaries', 'beneficiaryAdminRoles', 'companyAdminRoles', 'donorRole', 'chimpAdminRole', 'activeRole', 'employedCompanies', 'enabledEmployeeRoles'\n\nThe number of employedCompanies available in the response should be 9\n    \nThe number of enabledEmployeeRoles available in the response should be 9\n\nThe number of objects in included array under response should be 18\n\nExpects the below keys to be available under 'included' in response\n['id', 'type', 'links', 'attributes']\n['avatar', 'name', 'policyPercentage', 'policyMax', 'policyPeriod', 'automaticMatching', 'banner', 'communityType', 'balance', 'slug', 'createdAt']\n['roleType', 'beneficiaryId', 'groupId', 'companyId', 'createdAt']\n\nCompany names retrieved from 'included' array in response should match the expected company names\n\nPolicy Percentage retrieved from 'included' array in response should match the expected policy percentage\n\nPolicy Max retrieved from 'included' array in response should match the expected policy max\n\nPolicy Period retrieved from 'included' array in response should match the expected policy period\n\nEmployeeRoleIds id's retrieved under included array in response should match id's retreived from 'data' kay in response"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=employedCompanies,enabledEmployeeRoles - with employedCompanies,enabledEmployeeRoles where is user is not member of any company except Chimp community",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "04d41e0d-45f8-4fbc-b3c0-f138eed6b375",
								"type": "text/javascript",
								"exec": [
									"pm.variables.set(\"user_id\", 999010);",
									"",
									"",
									"// pm.sendRequest({",
									"//     url: pm.environment.get(\"auth0_token_url\"),",
									"//     method: 'POST',",
									"//     header: [",
									"//         'Content-Type: application/x-www-form-urlencoded'",
									"//     ],",
									"//     body: {",
									"//         mode: 'urlencoded',",
									"//         urlencoded: [",
									"//             {key: \"grant_type\", value: \"password\", disabled: false},",
									"//             {key: \"client_id\", value: \"t78nrVXBAqGpfVd6nZMLcwUzfB8Wp5nh\", disabled: false},",
									"//             {key: \"audience\", value: \"https://twin.24467.org/api/v2/\", disabled: false},",
									"//             {key: \"username\", value: \"api_4@chimp.net\", disabled: false},",
									"//             {key: \"password\", value: \"GiveAndLetGive!123\", disabled: false},",
									"//             {key: \"scope\", value:\"openid\",disabled: false}",
									"//         ]",
									"//     }",
									"// }, function (err, res) {",
									"//     if (res.json().error) {",
									"//         console.log(\"### ERROR - There was a problem getting the access token. Check console for details.\");",
									"//     } else {",
									"//         console.log(res.json())",
									"//         pm.variables.set(\"auth0_access_token_new\", res.json().access_token);",
									"//         console.log(\"You got a access_token of: \" + pm.variables.get(\"auth0_access_token_new\"));  ",
									"        ",
									"//         pm.sendRequest({",
									"//             url: pm.environment.get(\"api_host\")+\"/api/v2/auth/login\",",
									"//             method: 'POST',",
									"//             header: [",
									"//                 'Authorization: Bearer '+ res.json().access_token",
									"//             ],",
									"//             body: {",
									"//             }",
									"//         }, function (err, res) {",
									"//             if (res.json().error) {",
									"//                 console.log(\"### ERROR - There was a problem getting the user id.\");",
									"//             } else {",
									"//                 console.log(res.json())",
									"//                 pm.variables.set(\"user_id\", res.json().currentUser);",
									"//                 console.log(\"You got a user id: \" + pm.variables.get(\"user_id\"));    ",
									"//             }",
									"//         });",
									"//     }",
									"// });",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e29b6ed9-5aab-483f-b823-778f7c3fa870",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    /*pm.test(\"Response should not contain 'included' key\", function () { ",
									"        pm.response.to.not.have.jsonBody(\"included\"); ",
									"    });",
									"    ",
									"    //Checking if 'data' key is available in response",
									"    var keyArray = ['data'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }*/",
									"    ",
									"    jsonValueCheck(\"The name of the company in 'included' array should be 'Chimp Community'\", jsonData.included[0].attributes.name, \"Chimp Community\");",
									"    ",
									"    jsonValueCheck(\"The value of the key 'roleType' in 'included' array should be 'EmployeeRole'\", jsonData.included[1].attributes.roleType, \"EmployeeRole\");",
									"    ",
									"    jsonValueCheck(\"The number of employedCompanies available in the response should be 1\", jsonData.data.relationships.employedCompanies.data.length, 1);",
									"    ",
									"    jsonValueCheck(\"The number of enabledEmployeeRoles available in the response should be 1\", jsonData.data.relationships.enabledEmployeeRoles.data.length, 1);",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999010}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=employedCompanies,enabledEmployeeRoles",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "employedCompanies,enabledEmployeeRoles"
								}
							]
						},
						"description": "Test for a user where the user is not an Admin/member of any company\nSeeded user id is 999010\n\nNote: By default every user is a member of CHIMP commnunity. Hence, modifying the test case accordingly.\n\nTests\nSends a GET request with valid user Id and include parameter with all administered entities and roles\n\nExpecting status code to be 200\n\nResponse time shoule be less than 500ms\n\nResponse should be json\n\nResponse should not contain 'included' key\n\n'data' key should be available in response\n\nThe number of employedCompanies available in the response should be 0\n\nThe number of enabledEmployeeRoles available in the response should be 0"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "678df3ac-fc9f-4963-8831-fc38d3c27dbf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d333540-3032-478c-83e9-aa2f0397ca19",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GIVEB-138   API: Error codes: Users API",
			"description": null,
			"item": [
				{
					"name": "/users/{{user_id}} - could_not_assign_role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "58e44555-8b2b-4e73-8420-459f6d9d436c",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\",999000)",
									"",
									"var chimpAdminRoleId = null;",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"api_host\")+\"/api/v2/users/\"+\"31\"+\"?include=chimpAdminRole\",",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/vnd.api+json',",
									"        'Content-Type': 'application/vnd.api+json',",
									"        'Authorization': 'Bearer '+pm.variables.get(\"auth0_access_token_31\") ",
									"    }",
									"}, function(err, response) {",
									"    if (response.json().error) {",
									"        console.log(\"### ERROR - There was a problem with the Pre Req. Check console for details.\");",
									"    } else {",
									"        //Response in json format",
									"        var jsonData = response.json();",
									"        chimpAdminRoleId = jsonData.data.relationships.chimpAdminRole['data']['id'];",
									"        console.log(\"Chimp Admin Role Id: \"+chimpAdminRoleId);",
									"        pm.variables.set(\"chimpAdmin_RoleId\", parseInt(chimpAdminRoleId));",
									"    }",
									"});",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "916049f1-e41f-412a-bbe2-4130b952102d",
								"type": "text/javascript",
								"exec": [
									"// Status Check Test:",
									"pm.test(\"Expecting Status code to be 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"// Response Type Test",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"// JSON Contains errors Key:",
									"pm.test(\"Response Body contains errors key\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"errors\");",
									"});",
									"",
									"pm.test(\"Response Body contains key errors with value of 'could_not_assign_role'\", function() {",
									"    pm.expect(pm.response.json().errors[0].title).to.contain(\"could_not_assign_role\");",
									"});",
									"   ",
									"pm.test(\"The value of key 'validationCode' should be '2402'\", function() {",
									"    pm.expect(pm.response.json().errors[0].meta.validationCode).to.equal(\"2402\");",
									"}); ",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"users\",\n    \"id\": {{user_id}},\n    \"attributes\": {\n      \"activeRoleId\": {{chimpAdmin_RoleId}},\n      \"language\": \"en\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Seeded user id - 999000 (api@chimp.net)\n\nSend a PATCH to /users with a valid user Id and role Id which is not ownned by the user\n\nExpecting Status code to be 422\n\nResponse time is less than 500ms\n\nResponse should be json\n\nResponse Body contains errors key\n\nResponse Body contains key errors with value of 'could_not_assign_role'\n\nThe value of key'validationCode' should be '2402'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - role_not_found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5674f438-bbf9-42e7-8b34-117d8c87d6cf",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									"",
									"//Refer pre-request at folder level to generate access token"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0747d341-16f3-4d81-921d-b5e368757020",
								"type": "text/javascript",
								"exec": [
									"// Status Check Test:",
									"pm.test(\"Expecting Status code to be 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"// Response Type Test",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"// JSON Contains errors Key:",
									"pm.test(\"Response Body contains errors key\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"errors\");",
									"});",
									"",
									"pm.test(\"Response Body contains key errors with value of 'role_not_found'\", function() {",
									"    pm.expect(pm.response.json().errors[0].title).to.contain(\"role_not_found\");",
									"});",
									"   ",
									"pm.test(\"The value of key 'validationCode' should be '2403'\", function() {",
									"    pm.expect(pm.response.json().errors[0].meta.validationCode).to.equal(\"2403\");",
									"}); ",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"users\",\n    \"id\": {{user_id}},\n    \"attributes\": {\n      \"activeRoleId\": \"abcd444.000!@#$%^&*\",\n      \"language\": \"en\"\n    }\n  }\n}\n\n"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Seeded user id - 999000 (api@chimp.net)\n\nSend a PATCH to /users with a valid user Id and role Id of invalid format (String)\n\nExpecting Status code to be 422\n\nResponse time is less than 500ms\n\nResponse should be json\n\nResponse Body contains errors key\n\nResponse Body contains key errors with value of 'role_not_found'\n\nThe value of key 'validationCode' should be '2403'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - Missing Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fdd9612-ecd4-4663-803c-4809f1222f26",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									"",
									"var companyAdminRoleId = null;",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"api_host\")+\"/api/v2/users/\"+pm.variables.get(\"user_id\")+\"?include=administeredCompanies,companyAdminRoles\",",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/vnd.api+json',",
									"        'Content-Type': 'application/vnd.api+json',",
									"        'Authorization': 'Bearer '+pm.variables.get(\"auth0_access_token_999000\") //Refer pre-request at folder level",
									"    }",
									"}, function(err, response) {",
									"    if (response.json().error) {",
									"        console.log(\"### ERROR - There was a problem with the Pre Req. Check console for details.\");",
									"    } else {",
									"        //Response in json format",
									"        var jsonData = response.json();",
									"        companyAdminRoleId = jsonData.data.relationships.companyAdminRoles.data[0]['id'];",
									"        console.log(\"Company Admin Role Id: \"+companyAdminRoleId);",
									"        pm.variables.set(\"companyAdmin_RoleId\", parseInt(companyAdminRoleId));",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d8de8789-a1b8-4453-aae4-061c8b7ce01e",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Status Check Test",
									"pm.test(\"Expecting Status code to be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The value of key 'status' should be 'Unauthorized'\", function () {",
									"    pm.expect(jsonData[0].status).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"The value of key 'code' should be '101'\", function () {",
									"    pm.expect(jsonData[0].code).to.eql(\"101\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"users\",\n    \"id\": {{user_id}},\n    \"attributes\": {\n      \"activeRoleId\": {{companyAdmin_RoleId}},\n      \"language\": \"en\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Seeded user id - 999000 (api@chimp.net)\n\nSend a PATCH to /users with a valid active rolde ID (company admin role) and missing Auth\n\nExpecting Status code to be 401\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Unauthorized'\n\nThe value of key 'code' should be '101'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - Invalid Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fdd9612-ecd4-4663-803c-4809f1222f26",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									"",
									"var companyAdminRoleId = null;",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"api_host\")+\"/api/v2/users/\"+pm.variables.get(\"user_id\")+\"?include=administeredCompanies,companyAdminRoles\",",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/vnd.api+json',",
									"        'Content-Type': 'application/vnd.api+json',",
									"        'Authorization': 'Bearer '+pm.variables.get(\"auth0_access_token_999000\") //Refer pre-request at folder level",
									"    }",
									"}, function(err, response) {",
									"    if (response.json().error) {",
									"        console.log(\"### ERROR - There was a problem with the Pre Req. Check console for details.\");",
									"    } else {",
									"        //Response in json format",
									"        var jsonData = response.json();",
									"        companyAdminRoleId = jsonData.data.relationships.companyAdminRoles.data[0]['id'];",
									"        console.log(\"Company Admin Role Id: \"+companyAdminRoleId);",
									"        pm.variables.set(\"companyAdmin_RoleId\", parseInt(companyAdminRoleId));",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "363747e7-5a16-4dbf-9867-5a283b175be8",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Status Check Test",
									"pm.test(\"Expecting Status code to be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The value of key 'status' should be 'Unauthorized'\", function () {",
									"    pm.expect(jsonData[0].status).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"The value of key 'code' should be '101'\", function () {",
									"    pm.expect(jsonData[0].code).to.eql(\"101\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 000"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"users\",\n    \"id\": {{user_id}},\n    \"attributes\": {\n      \"activeRoleId\": {{companyAdmin_RoleId}},\n      \"language\": \"en\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Seeded user id - 999000 (api@chimp.net)\n\nSend a PATCH to /users with a valid active rolde ID (company admin role) and Invalid Auth\n\nExpecting Status code to be 401\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Unauthorized'\n\nThe value of key 'code' should be '101'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - Auth of another user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0fdd9612-ecd4-4663-803c-4809f1222f26",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									"",
									"var companyAdminRoleId = null;",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"api_host\")+\"/api/v2/users/\"+pm.variables.get(\"user_id\")+\"?include=administeredCompanies,companyAdminRoles\",",
									"    method: 'GET',",
									"    header: {",
									"        'Accept': 'application/vnd.api+json',",
									"        'Content-Type': 'application/vnd.api+json',",
									"        'Authorization': 'Bearer '+pm.variables.get(\"auth0_access_token_999000\") //Refer pre-request at folder level",
									"    }",
									"}, function(err, response) {",
									"    if (response.json().error) {",
									"        console.log(\"### ERROR - There was a problem with the Pre Req. Check console for details.\");",
									"    } else {",
									"        //Response in json format",
									"        var jsonData = response.json();",
									"        companyAdminRoleId = jsonData.data.relationships.companyAdminRoles.data[0]['id'];",
									"        console.log(\"Company Admin Role Id: \"+companyAdminRoleId);",
									"        pm.variables.set(\"companyAdmin_RoleId\", parseInt(companyAdminRoleId));",
									"    }",
									"});",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b9ad94fb-9819-4ae8-8d79-df73fdf60318",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    // Status Check Test:",
									"    pm.test(\"Expecting Status code to be 403\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    ",
									"    // Response Type Test",
									"    pm.test(\"The response should be a JSON\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    jsonValueCheck(\"The value of key 'status' should be 'Forbidden'\", jsonData[0].status, \"Forbidden\")",
									"    ",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_31}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"users\",\n    \"id\": {{user_id}},\n    \"attributes\": {\n      \"activeRoleId\": {{companyAdmin_RoleId}},\n      \"language\": \"en\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Seeded user id - 999000 (api@chimp.net)\n\nSend a PATCH to /users with a valid active rolde ID (company admin role) and Auth of another user (31)\n\nExpecting Status code to be 403\n\nResponse time is less than 500ms\n\nThe response should be a JSON\n\nThe value of key 'status' should be 'Forbidden'"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "555e1109-48d3-4b28-bb13-868a388b26e6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7d0fb9f3-b537-4fd9-aae8-106d97468fc8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GIVEB-169 Add sortable_fields method to all Resources",
			"description": null,
			"item": [
				{
					"name": "/users/{{user_id}}/administeredGroups?sort=-id - sort administered groups by Id in descending order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aaf25426-0886-462d-9eb8-66041a9308fb",
								"type": "text/javascript",
								"exec": [
									"//Function to sort integer array in descending order",
									"function sortDescending(a,b) {",
									"  return b-a;",
									"}",
									"",
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									"",
									"var idArray = [];",
									"var sortedArrayDescending = [];",
									"",
									"// Getting administered Campaign Ids",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"api_host\")+\"/api/v2/users/\"+pm.variables.get(\"user_id\")+\"?include=administeredGroups\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/vnd.api+json',",
									"        'Authorization': 'Bearer '+pm.variables.get(\"auth0_access_token_999000\")",
									"    }",
									"}, function (err, response) {",
									"    var jsonData = response.json();",
									"    for (var i=0; i<jsonData.included.length; i++){",
									"        idArray.push(jsonData.included[i]['id']);",
									"    }",
									"    console.log(\"Array before sorting: \"+idArray);",
									"    sortedArrayDescending = idArray.sort(sortDescending);",
									"    console.log(\"Sorted Array in descending order: \"+sortedArrayDescending);",
									"    pm.variables.set(\"sorted_array\", sortedArrayDescending);",
									"    ",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a8560172-9732-4d97-b360-4f3534e10447",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"The response should be a JSON\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    var actualIdArray = [];",
									"    for (var i=0; i<jsonData.data.length; i++){",
									"        actualIdArray.push(jsonData.data[i]['id']);",
									"    }",
									"    ",
									"    console.log(\"Id Array retrieved from response: \"+actualIdArray);",
									"    ",
									"    jsonValueCheck(\"The group id's retrieved in response should be sorted in descending order\", JSON.stringify(actualIdArray)===JSON.stringify(pm.variables.get(\"sorted_array\")), true);",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}/administeredGroups?sort=-id",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}",
								"administeredGroups"
							],
							"query": [
								{
									"key": "sort",
									"value": "-id"
								}
							]
						},
						"description": "Seeded user id is 999000  \nUser - api@chimp.net\nUser here is an Admin for 6 Groups\n\nSends a GET request to /users/{{user_id}}/administeredGroups?sort=-id\n\nExpecting status code to be 200\n\nResponse time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe group id's retrieved in response should be sorted in descending order"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}/administeredGroups?sort=id - sort administered groups by Id in ascending order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83af9517-b999-4065-8eac-8f49b0702a8f",
								"type": "text/javascript",
								"exec": [
									"//Function to sort integer array in ascending order",
									"function sortAscending(a,b) {",
									"  return a-b;",
									"}",
									"",
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									"",
									"var idArray = [];",
									"var sortedArrayAscending = [];",
									"",
									"// Getting administered Beneficiary Ids",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"api_host\")+\"/api/v2/users/\"+pm.variables.get(\"user_id\")+\"?include=administeredGroups\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/vnd.api+json',",
									"        'Authorization': 'Bearer '+pm.variables.get(\"auth0_access_token_999000\")",
									"    }",
									"}, function (err, response) {",
									"    var jsonData = response.json();",
									"    for (var i=0; i<jsonData.included.length; i++){",
									"        idArray.push(jsonData.included[i]['id']);",
									"    }",
									"    console.log(\"Array before sorting: \"+idArray);",
									"    sortedArrayAscending = idArray.sort(sortAscending);",
									"    console.log(\"Sorted Array in ascending order: \"+sortedArrayAscending);",
									"    pm.variables.set(\"sorted_array\", sortedArrayAscending);",
									"    ",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9a697ad7-a408-425c-bf5b-a98216d46856",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"The response should be a JSON\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    var actualIdArray = [];",
									"    for (var i=0; i<jsonData.data.length; i++){",
									"        actualIdArray.push(jsonData.data[i]['id']);",
									"    }",
									"    ",
									"    console.log(\"Id Array retrieved from response: \"+actualIdArray);",
									"    ",
									"    jsonValueCheck(\"The group id's retrieved in response should be sorted in ascending order\", JSON.stringify(actualIdArray)===JSON.stringify(pm.variables.get(\"sorted_array\")), true);",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}/administeredGroups?sort=id",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}",
								"administeredGroups"
							],
							"query": [
								{
									"key": "sort",
									"value": "id"
								}
							]
						},
						"description": "Seeded user id is 999000  \nUser - api@chimp.net\nUser here is an Admin for 6 groups\n\nSends a GET request to /users/{{user_id}}/administeredGroups?sort=id\n\nExpecting status code to be 200\n\nResponse time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe group id's retrieved in response should be sorted in ascending order"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}/administeredGroups?sort=-avatar - sort administered groups by avatar",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7faca3d6-a822-46df-ba1a-c599c7629a94",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "063fc2e4-dc7b-4a3e-979c-1304adf59a6d",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"    ",
									"    pm.test(\"The response should be a JSON\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    pm.test(\"The response body should contain 'errors' key\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"errors\");",
									"    });",
									"    ",
									"    jsonValueCheck(\"The value of key 'title' should be 'Invalid sort criteria'\", jsonData.errors[0].title , \"Invalid sort criteria\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}/administeredGroups?sort=-avatar",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}",
								"administeredGroups"
							],
							"query": [
								{
									"key": "sort",
									"value": "-avatar"
								}
							]
						},
						"description": "Seeded user id is 999000  \nUser - api@chimp.net\n\nUser here is an Admin for 6 groups\n\nSends a GET request to /users/{{user_id}}/administeredGroups?sort=-avatar\n\nExpecting status code to be 400\n\nThe response time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe response body should contain 'errors' key\n\nThe value of key 'title' should be 'Invalid sort criteria'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}/administeredGroups?sort=-name - sort administered groups by name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7faca3d6-a822-46df-ba1a-c599c7629a94",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "063fc2e4-dc7b-4a3e-979c-1304adf59a6d",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"    ",
									"    pm.test(\"The response should be a JSON\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    pm.test(\"The response body should contain 'errors' key\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"errors\");",
									"    });",
									"    ",
									"    jsonValueCheck(\"The value of key 'title' should be 'Invalid sort criteria'\", jsonData.errors[0].title , \"Invalid sort criteria\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}/administeredGroups?sort=-name",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}",
								"administeredGroups"
							],
							"query": [
								{
									"key": "sort",
									"value": "-name"
								}
							]
						},
						"description": "Seeded user id is 999000  \nUser - api@chimp.net\n\nUser here is an Admin for 6 groups\n\nSends a GET request to /users/{{user_id}}/administeredGroups?sort=-name\n\nExpecting status code to be 400\n\nThe response time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe response body should contain 'errors' key\n\nThe value of key 'title' should be 'Invalid sort criteria'"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "678df3ac-fc9f-4963-8831-fc38d3c27dbf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d333540-3032-478c-83e9-aa2f0397ca19",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GIVEB-32 Auth on User Administered Entities",
			"description": null,
			"item": [
				{
					"name": "/users/{{user_id}}?include=administeredCompanies - with administeredCompanies and valid access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be82d6ac-1bf8-48b5-a1ed-ec054a20525e",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"The response should be a JSON\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    jsonValueCheck(\"The id available in the response should be the userId passed in the request URL\", jsonData.data.id, pm.variables.get(\"user_id\"));",
									"    ",
									"    jsonValueCheck(\"The number of companies available in the response should be 6\", jsonData.data.relationships.administeredCompanies.data.length, 6);",
									"    ",
									"    var companyIdArray = [];",
									"    var typeArray = [];",
									"    var expectedTypeArray = ['companies', 'companies', 'companies', 'companies', 'companies', 'companies'];",
									"    for (var i in jsonData.data.relationships.administeredCompanies.data){",
									"        companyIdArray.push(jsonData.data.relationships.administeredCompanies.data[i]['id']);",
									"        typeArray.push(jsonData.data.relationships.administeredCompanies.data[i]['type']);",
									"    }",
									"    console.log(\"Company Ids: \"+companyIdArray);",
									"    ",
									"    jsonValueCheck(\"The value of key 'jsonData.data.relationships.administeredCompanies.data[i]['type']' should be 'companies'\", JSON.stringify(typeArray)===JSON.stringify(expectedTypeArray), true);",
									"    ",
									"    jsonValueCheck(\"The number of objects in included array under response should be 6\", jsonData.included.length, 6);",
									"    ",
									"    ",
									"    var expectedAdministeredCompanies = ['Acme Company', 'Cement Co', 'Nike', 'Supermarket 4 U', 'The Codfather', 'Wok & Roll'];",
									"    var includedCompanyIdArray = [];",
									"    var includedTypeArray = [];",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        includedCompanyIdArray.push(jsonData.included[i]['id']);",
									"        includedTypeArray.push(jsonData.included[i]['type']);",
									"        jsonValueCheck(\"The value of key 'balance' under 'included' array for a company should be 111.0\", jsonData.included[i]['attributes']['balance'], \"111.0\");",
									"        jsonValueCheck(\"Company '\"+jsonData.included[i]['attributes']['name']+\"' retrieved from 'included' array under response should be available in expected Administered Companies \", expectedAdministeredCompanies.includes(jsonData.included[i]['attributes']['name']), true);",
									"    }",
									"    ",
									"    jsonValueCheck(\"Company id's retrieved from included array in response should match company id's retreived from 'data' kay in response\", JSON.stringify(includedCompanyIdArray)===JSON.stringify(companyIdArray), true);",
									"    jsonValueCheck(\"The value of key 'jsonData.included[i]['type']' should be 'companies'\", JSON.stringify(includedTypeArray)===JSON.stringify(expectedTypeArray), true);",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "442883b4-6fe5-4bdc-9f15-6199a31fc7c2",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=administeredCompanies",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "administeredCompanies"
								}
							]
						},
						"description": "Seeded user - 999000\n\nSends a GET request with a Valid User ID and valid access token including administeredCompanies\n\nExpecting status code to be 200\n\nThe response time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe id available in the response should be the userId passed in the request URL\n\nThe number of companies available in the response should be 6\n\nThe value of key 'jsonData.data.relationships.administeredCompanies.data[i]['type']' should be 'companies'\n\nThe number of objects in included array under response should be 6\n\nThe below companies should be available in 'included' array under response\n['Acme Company', 'Cement Co', 'Nike', 'Supermarket 4 U', 'The Codfather', 'Wok & Roll']\n\nThe value of key 'balance' under 'included' array for a company should be 111.0\n\nCompany id's retrieved from included array in response should match company id's retreived from 'data' kay in response\n\nThe value of key 'jsonData.included[i]['type']' should be 'companies'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=employedCompanies - with employedCompanies and valid access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4856b2b9-2f7f-475b-b885-8d4deda9ad31",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"The response should be a JSON\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    jsonValueCheck(\"The id available in the response should be the userId passed in the request URL\", jsonData.data.id, pm.variables.get(\"user_id\"));",
									"    ",
									"    jsonValueCheck(\"The number of employed companies available in the response should be 1\", jsonData.data.relationships.employedCompanies.data.length, 1);",
									"    ",
									"    jsonValueCheck(\"The value of key 'type' under object 'employedCompanies' should be 'companies'\", jsonData.data.relationships.employedCompanies.data[0].type, 'companies');",
									"    ",
									"    var companyId = jsonData.data.relationships.employedCompanies.data[0].id;",
									"    ",
									"    jsonValueCheck(\"The number of object(s) in included array under response should be 1\", jsonData.included.length, 1);",
									"    jsonValueCheck(\"Company id retrieved from included array in response should match company id retreived from 'data' kay in response\", jsonData.included[0].id, companyId);",
									"    jsonValueCheck(\"The value of key 'jsonData.included[i]['type']' should be 'companies'\", jsonData.included[0].type, 'companies');",
									"    jsonValueCheck(\"'Balance' key should not be available in 'attributes' object under 'included' array since the user is just an employee \", 'balance' in jsonData.included[0].attributes, false);",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "81fda249-0554-4645-9ce4-3517abf2439c",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999010\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999010}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=employedCompanies",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "employedCompanies"
								}
							]
						},
						"description": "Seeded user - 999010\n\nSends a GET request with a Valid User ID and valid access token including employedCompanies\n\nExpecting status code to be 200\n\nThe response time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe id available in the response should be the userId passed in the request URL\n\nThe number of employed companies available in the response should be 1\n\nThe value of key 'type' under object 'employedCompanies' should be 'companies'\n\nThe number of object(s) in included array under response should be 1\n\nCompany id retrieved from included array in response should match company id retreived from 'data' kay in response\n\nThe value of key 'jsonData.included[i]['type']' should be 'companies'\n\n'Balance' key should not be available in 'attributes' object under 'included' array since the user is just an employee"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=administeredCompanies,employedCompanies - with administeredCompanies,employedCompanies and invalid access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23816b89-9338-4d45-b70f-75c3b1b00de3",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 403\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    ",
									"    pm.test(\"The response should be a JSON\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //JSON Contains error Key with appropriate message",
									"    pm.test(\"The response body should contain 'status' key\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"status\");",
									"    });",
									"    ",
									"    //JSON value check",
									"    pm.test(\"Value of 'status' key should be 'Forbidden'\", function () {",
									"        pm.expect(jsonData[0].status).to.eql(\"Forbidden\");",
									"    });",
									"    ",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6c117fad-18fb-443d-8b42-7228ffb04764",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999010\");",
									"pm.variables.set(\"Authorization\", \"Token 999000\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=administeredCompanies,employedCompanies",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "administeredCompanies,employedCompanies"
								}
							]
						},
						"description": "Seeded user - 999010\nSends a GET request with a Valid User ID and invalid access token including administeredCompanies,employedCompanies\n\nExpecting status code to be 403\n\nThe response time should be less than 500ms\n\nThe response should be a JSON\n\nThe response body should contain 'status' key\n\nValue of 'status' key should be 'Forbidden'"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "678df3ac-fc9f-4963-8831-fc38d3c27dbf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d333540-3032-478c-83e9-aa2f0397ca19",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GIVEB-21 Authorisation Layer for APIs",
			"description": null,
			"item": [
				{
					"name": "/users/{{user_id}} - User Details by valid ID & valid access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7b845a8-6232-4a3c-900e-ba36703441f6",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    var firstKey;",
									"    for (var i in jsonData){",
									"        firstKey = i;",
									"    }",
									"    pm.test(\"'data' key should be available in response\", function () {",
									"        pm.expect(firstKey).to.equal('data');",
									"    });",
									"    ",
									"    var userId = pm.variables.get(\"user_id\");",
									"    //Check if user Id matches the user Id passed",
									"    jsonValueCheck(\"User Id in response should match the user Id passed\", jsonData.data.id, userId);",
									"    ",
									"    //Check value of data.type",
									"    jsonValueCheck(\"Value of key 'data[type]' should be users\", jsonData.data.type, \"users\");",
									"    ",
									"    //Check value of data.attributes.language",
									"    /*jsonValueCheck(\"Value of key 'data[attributes][language]' should be 'en'\", jsonData.data.attributes.language, \"en\");*/",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5fafcc18-939a-4bad-b524-3a9b551236ff",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with a Valid User ID and valid access token(User id used for this test case is a seeded user, user_id - 999000)  \n\n\nExpecting status code to be 200\n\nResponse time is less than 500ms\n\nResponse should be json\n\n'data' key should be available in response\n\nUser Id in response should match the user Id ed\n\nValue of key 'data[type]' should be users"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details by valid User ID & invalid access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c47c62da-916f-40af-84c4-ddbe48c8de07",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 403\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    ",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //JSON value check",
									"    pm.test(\"Value of key 'status' should be 'Forbidden'\", function () {",
									"        pm.expect(jsonData[0].status).to.eql(\"Forbidden\");",
									"    });",
									"    ",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f45c5833-c59b-460c-a7c6-d271a4c6a762",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999010}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with a Valid User ID and invalid access token (User id used for this test case is a seeded user, user_id - 999000)\n\n\nExpecting status code to be 403\n\nResponse time is less than 500ms\n\nResponse should be json\n\nResponse Body should contain 'error' key\n\nValue of 'error' key should be 'Forbidden'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details by Invalid User ID & valid token for other user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28ecd526-1bf7-4a9d-bdde-f0c342ebc3c8",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    ",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //JSON Contains error Key with appropriate message",
									"    pm.test(\"Response Body should contain 'errors' key\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"errors\");",
									"    });",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4030892d-acdc-4750-8a9d-d196c65888c4",
								"type": "text/javascript",
								"exec": [
									"//Setting invalid User Id",
									"pm.variables.set(\"user_id\", \"LKJh\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with an invalid user Id  & valid token for other user\n\nExpecting status code to be 403\n\nResponse time is less than 500ms\n\nResponse should be json\n\nResponse Body should contain 'error' key\n\nValue of 'error' key should be 'Forbidden'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details by Invalid User ID & invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86908a5e-20cd-49d7-9b19-a962077467d9",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Status Check Test",
									"pm.test(\"Expecting Status code to be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The value of key 'status' should be 'Unauthorized'\", function () {",
									"    pm.expect(jsonData[0].status).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"The value of key 'code' should be '101'\", function () {",
									"    pm.expect(jsonData[0].code).to.eql(\"101\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8f95a36c-ed8f-47dc-8be8-ad639316e029",
								"type": "text/javascript",
								"exec": [
									"//Setting invalid User Id",
									"pm.variables.set(\"user_id\", \"LKJh\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer abcd"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with an invalid user Id  & invalid token\n\nExpecting Status code to be 401\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Unauthorized'\n\nThe value of key 'code' should be '101'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details by valid User ID & empty token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6aec848e-f680-4e91-9775-a7749f2870c6",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Status Check Test",
									"pm.test(\"Expecting Status code to be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The value of key 'status' should be 'Unauthorized'\", function () {",
									"    pm.expect(jsonData[0].status).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"The value of key 'code' should be '101'\", function () {",
									"    pm.expect(jsonData[0].code).to.eql(\"101\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e45bfcff-bace-4995-98e9-2e1270b5be0f",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with a Valid User ID & empty token (User id used for this test case is a seeded user, user_id - 999000)  \n\nExpecting Status code to be 401\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Unauthorized'\n\nThe value of key 'code' should be '101'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details by valid User ID & case incorrect token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58c69b1e-e3f6-4600-859e-aff82e059178",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Status Check Test",
									"pm.test(\"Expecting Status code to be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The value of key 'status' should be 'Unauthorized'\", function () {",
									"    pm.expect(jsonData[0].status).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"The value of key 'code' should be '101'\", function () {",
									"    pm.expect(jsonData[0].code).to.eql(\"101\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d23861fc-fb65-4681-95fb-bf621694bd70",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with a Valid User ID & case incorrect token(User id used for this test case is a seeded user, user_id - 999000)  \n\nExpecting Status code to be 401\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Unauthorized'\n\nThe value of key 'code' should be '101'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details with token and without User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "126fcee9-4e50-4259-b366-4a19ac37b076",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 403\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    ",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    pm.test(\"The value of key 'status' should be 'Forbidden'\", function () {",
									"        pm.expect(jsonData[0].status).to.eql(\"Forbidden\");",
									"    });",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "471d0734-90cd-4cec-b289-c3f770b09e6c",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000 (api@chimp.net), this is a seeded user.",
									"pm.variables.set(\"user_id\", \"\");"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with token and without user Id\n\nExpecting status code to be 403\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Forbidden'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - without user Id and without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6dacab6e-7594-4f8f-b2e3-f2ab7d361fa1",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Status Check Test",
									"pm.test(\"Expecting Status code to be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The value of key 'status' should be 'Unauthorized'\", function () {",
									"    pm.expect(jsonData[0].status).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"The value of key 'code' should be '101'\", function () {",
									"    pm.expect(jsonData[0].code).to.eql(\"101\");",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0142e701-e34d-4389-a41d-26ff0cc789a4",
								"type": "text/javascript",
								"exec": [
									"//User id here is 999000. This is a seeded user",
									"pm.variables.set(\"user_id\", \"\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request without user Id and without token\n\nExpecting Status code to be 401\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Unauthorized'\n\nThe value of key 'code' should be '101'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details by unknown user ID and valid token for other user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "75b9c48b-5c1b-4b83-8e0e-fc8cc3ae3908",
								"type": "text/javascript",
								"exec": [
									"//Setting unknown User Id",
									"pm.variables.set(\"user_id\", 0);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "81ff3c29-eb63-4881-96ed-04416d2cc454",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    ",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //JSON Contains error Key with appropriate message",
									"    pm.test(\"Response Body should contain 'errors' key\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"errors\");",
									"    });",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with an unknown user Id (user Id format is valid but does not exist in the system, eg: userId - 0)  and valid token for other user\n\nExpecting status code to be 403\n\nResponse time is less than 500ms\n\nResponse should be json\n\nResponse Body should contain 'error' key\n\nValue of 'error' key should be 'Forbidden'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - User Details by unknown user ID and token appropriate to unknown user Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "daba804a-7f55-4391-845b-09fd9ba3fb56",
								"type": "text/javascript",
								"exec": [
									"//Setting unknown User Id",
									"pm.variables.set(\"user_id\", 0);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c5edfa36-933f-4251-943f-1fea309bd698",
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Status Check Test",
									"pm.test(\"Expecting Status code to be 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"//Response should be a json",
									"pm.test(\"Response should be json\", function () {",
									"    pm.expect(typeof(pm.response.json())).to.equal('object');",
									"});",
									"",
									"pm.test(\"The value of key 'status' should be 'Unauthorized'\", function () {",
									"    pm.expect(jsonData[0].status).to.eql(\"Unauthorized\");",
									"});",
									"",
									"pm.test(\"The value of key 'code' should be '101'\", function () {",
									"    pm.expect(jsonData[0].code).to.eql(\"101\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer 0"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with an unknown user Id (user Id format is valid but does not exist in the system, eg: userId - 0)  & token appropriate to unknown user Id\n\nExpecting Status code to be 401\n\nResponse time is less than 500ms\n\nResponse should be json\n\nThe value of key 'status' should be 'Unauthorized'\n\nThe value of key 'code' should be '101'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}} - Incorrect end point",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69237723-3a4a-470b-83c1-1c575bc641da",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 404\", function () {",
									"        pm.response.to.have.status(404);",
									"    });",
									"    ",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //JSON Contains error Key with appropriate message",
									"    pm.test(\"Response Body should contain 'error' key\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"error\");",
									"    });",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e680264a-8883-4991-b577-adb648430f2b",
								"type": "text/javascript",
								"exec": [
									"//User id here is 999000. This is a seeded user",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/user/{{user_id}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"user",
								"{{user_id}}"
							]
						},
						"description": "Sends a GET request with an incorrect end point\n\nExpecting status code to be 404\n\nResponse time is less than 500ms\n\nResponse should be json\n\nResponse Body should contain 'error' key"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=administeredGroups - with administeredGroups & valid access token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b985a0a-1582-4af8-ad02-0126b2de77e9",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000, this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "24b6a5b5-e62f-4a24-ad87-0a1c8ce28bd3",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The number of groups available in the response should be 6\", jsonData.data.relationships.administeredGroups.data.length, 6);",
									"    ",
									"    var groupIdArray = [];",
									"    var typeArray = [];",
									"    var expectedTypeArray = ['groups', 'groups', 'groups', 'groups', 'groups', 'groups'];",
									"    //Verify that the value of \"administeredGroups[data][i][type]\" key is \"groups\"",
									"    for (var i in jsonData.data.relationships.administeredGroups.data){",
									"        groupIdArray.push(jsonData.data.relationships.administeredGroups.data[i]['id']);",
									"        typeArray.push(jsonData.data.relationships.administeredGroups.data[i]['type']);",
									"    }",
									"    console.log(\"Group Ids: \"+groupIdArray);",
									"    ",
									"    jsonValueCheck(\"The value of key 'jsonData.data.relationships.administeredGroups.data[i]['type']' should be 'groups'\", JSON.stringify(typeArray)===JSON.stringify(expectedTypeArray), true);",
									"    ",
									"    jsonValueCheck(\"The number of objects in included array under response should be 6\", jsonData.included.length, 6);",
									"    ",
									"    //Verify groud ids and group names in included array",
									"    var includedGroupIdArray = [];",
									"    var includedTypeArray = [];",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        includedGroupIdArray.push(jsonData.included[i]['id']);",
									"        includedTypeArray.push(jsonData.included[i]['type']);",
									"    }",
									"    ",
									"    jsonValueCheck(\"Group id's retrieved from included array in response should match group id's retreived from 'data' kay in response\", JSON.stringify(includedGroupIdArray)===JSON.stringify(groupIdArray), true);",
									"    jsonValueCheck(\"The value of key 'jsonData.included[i]['type']' should be 'groups'\", JSON.stringify(includedTypeArray)===JSON.stringify(expectedTypeArray), true);",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=administeredGroups",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "administeredGroups"
								}
							]
						},
						"description": "Sends a GET request with valid user id (seeded user- 999000) & valid access token including administeredGroups\n\nExpecting status code to be 200\n\nResponse time shoule be less than 500ms\n\nResponse should be json\n\n'data' key should be available in response\n\n'included' key should be available in response\n\nThe number of groups available in the response should be 6\n\nThe value of key 'jsonData.data.relationships.administeredGroups.data[i]['type']' should be 'groups'\n\nThe number of objects in included array under response should be 6\n\nGroup id's retrieved from included array in response should match group id's retreived from 'data' kay in response\n\nThe value of key 'jsonData.included[i]['type']' should be 'groups'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=administeredCampaigns - with administeredCampaigns  & valid access token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a93d6ec6-6854-4e83-85c5-85894a53deb3",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000, this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2221fe5b-1c1f-4dc9-9b0f-da99723c8da2",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The number of campaigns available in the response should be 6\", jsonData.data.relationships.administeredCampaigns.data.length, 6);",
									"    ",
									"    var campaignIdArray = [];",
									"    var typeArray = [];",
									"    var expectedTypeArray = ['campaigns', 'campaigns', 'campaigns', 'campaigns', 'campaigns', 'campaigns'];",
									"    for (var i in jsonData.data.relationships.administeredCampaigns.data){",
									"        campaignIdArray.push(jsonData.data.relationships.administeredCampaigns.data[i]['id']);",
									"        typeArray.push(jsonData.data.relationships.administeredCampaigns.data[i]['type']);",
									"    }",
									"    console.log(\"Campaign Ids: \"+campaignIdArray);",
									"    ",
									"    jsonValueCheck(\"The value of key 'jsonData.data.relationships.administeredCampaigns.data[i]['type']' should be 'campaigns'\", JSON.stringify(typeArray)===JSON.stringify(expectedTypeArray), true);",
									"    ",
									"    jsonValueCheck(\"The number of objects in included array under response should be 6\", jsonData.included.length, 6);",
									"    ",
									"    //Verify groud ids and group names in included array",
									"    var includedCampaignIdArray = [];",
									"    var includedTypeArray = [];",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        includedCampaignIdArray.push(jsonData.included[i]['id']);",
									"        includedTypeArray.push(jsonData.included[i]['type']);",
									"    }",
									"    ",
									"    jsonValueCheck(\"Campaign id's retrieved from included array in response should match campaign id's retreived from 'data' kay in response\", JSON.stringify(includedCampaignIdArray)===JSON.stringify(campaignIdArray), true);",
									"    jsonValueCheck(\"The value of key 'jsonData.included[i]['type']' should be 'campaigns'\", JSON.stringify(includedTypeArray)===JSON.stringify(expectedTypeArray), true);",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=administeredCampaigns",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "administeredCampaigns"
								}
							]
						},
						"description": "Sends a GET request with valid user id (seeded user- 999000) & valid access token including administeredCampaigns\n \nExpecting status code to be 200\n\nResponse time shoule be less than 500ms\n\nResponse should be json\n\n'data' key should be available in response\n\n'included' key should be available in response\n\nThe number of campaigns available in the response should be 6\n\nThe value of key 'jsonData.data.relationships.administeredCampaigns.data[i]['type']' should be 'campaigns'\n\nThe number of objects in included array under response should be 6\n\nCampaign id's retrieved from included array in response should match campaign id's retreived from 'data' kay in response\n\nThe value of key 'jsonData.included[i]['type']' should be 'campaigns'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=administeredCompanies - with administeredCompanies  & valid access token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6b85040e-dd78-47a5-b76d-19b266772686",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000, this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a90536b2-0836-4e53-8a48-c5e3aa4ff486",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The number of companies available in the response should be 6\", jsonData.data.relationships.administeredCompanies.data.length, 6);",
									"    ",
									"    var companyIdArray = [];",
									"    var typeArray = [];",
									"    var expectedTypeArray = ['companies', 'companies', 'companies', 'companies', 'companies', 'companies'];",
									"    for (var i in jsonData.data.relationships.administeredCompanies.data){",
									"        companyIdArray.push(jsonData.data.relationships.administeredCompanies.data[i]['id']);",
									"        typeArray.push(jsonData.data.relationships.administeredCompanies.data[i]['type']);",
									"    }",
									"    console.log(\"Company Ids: \"+companyIdArray);",
									"    ",
									"    jsonValueCheck(\"The value of key 'jsonData.data.relationships.administeredCompanies.data[i]['type']' should be 'companies'\", JSON.stringify(typeArray)===JSON.stringify(expectedTypeArray), true);",
									"    ",
									"    jsonValueCheck(\"The number of objects in included array under response should be 6\", jsonData.included.length, 6);",
									"    ",
									"    var includedCompanyIdArray = [];",
									"    var includedTypeArray = [];",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        includedCompanyIdArray.push(jsonData.included[i]['id']);",
									"        includedTypeArray.push(jsonData.included[i]['type']);",
									"    }",
									"    ",
									"    jsonValueCheck(\"Company id's retrieved from included array in response should match company id's retreived from 'data' kay in response\", JSON.stringify(includedCompanyIdArray)===JSON.stringify(companyIdArray), true);",
									"    jsonValueCheck(\"The value of key 'jsonData.included[i]['type']' should be 'companies'\", JSON.stringify(includedTypeArray)===JSON.stringify(expectedTypeArray), true);",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=administeredCompanies",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "administeredCompanies"
								}
							]
						},
						"description": "Sends a GET request with valid user id (seeded user- 999000) & valid access token including administeredCompanies\n\nExpecting status code to be 200\n\nResponse time shoule be less than 500ms\n\nResponse should be json\n\n'data' key should be available in response\n\n'included' key should be available in response\n\nThe number of companies available in the response should be 6\n\nThe value of key 'jsonData.data.relationships.administeredCompanies.data[i]['type']' should be 'companies'\n\nThe number of objects in included array under response should be 6\n\nCompany id's retrieved from included array in response should match company id's retreived from 'data' kay in response\n\nThe value of key 'jsonData.included[i]['type']' should be 'companies'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=administeredBeneficiaries - with administeredBeneficiaries  & valid access token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "72395f83-9360-44ed-ac24-82894bcba8fe",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000, this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fe86f5b2-ef13-46d0-aa44-02fd791bf7f4",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    jsonValueCheck(\"The number of beneficiaries available in the response should be 6\", jsonData.data.relationships.administeredBeneficiaries.data.length, 6);",
									"    ",
									"    var beneficiaryIdArray = [];",
									"    var typeArray = [];",
									"    var expectedTypeArray = ['beneficiaries', 'beneficiaries', 'beneficiaries', 'beneficiaries', 'beneficiaries', 'beneficiaries'];",
									"    for (var i in jsonData.data.relationships.administeredBeneficiaries.data){",
									"        beneficiaryIdArray.push(jsonData.data.relationships.administeredBeneficiaries.data[i]['id']);",
									"        typeArray.push(jsonData.data.relationships.administeredBeneficiaries.data[i]['type']);",
									"    }",
									"    console.log(\"Beneficary Ids: \"+beneficiaryIdArray);",
									"    ",
									"    jsonValueCheck(\"The value of key 'jsonData.data.relationships.administeredBeneficiaries.data[i]['type']' should be 'beneficiaries'\", JSON.stringify(typeArray)===JSON.stringify(expectedTypeArray), true);",
									"    ",
									"    jsonValueCheck(\"The number of objects in included array under response should be 6\", jsonData.included.length, 6);",
									"    ",
									"    var includedBeneficiaryIdArray = [];",
									"    var includedTypeArray = [];",
									"    for (var i=0; i < jsonData.included.length; i++ ){",
									"        includedBeneficiaryIdArray.push(jsonData.included[i]['id']);",
									"        includedTypeArray.push(jsonData.included[i]['type']);",
									"    }",
									"    ",
									"    jsonValueCheck(\"Beneficiary id's retrieved from included array in response should match beneficiary id's retreived from 'data' kay in response\", JSON.stringify(includedBeneficiaryIdArray)===JSON.stringify(beneficiaryIdArray), true);",
									"    jsonValueCheck(\"The value of key 'jsonData.included[i]['type']' should be 'beneficiaries'\", JSON.stringify(includedTypeArray)===JSON.stringify(expectedTypeArray), true);",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=administeredBeneficiaries",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "administeredBeneficiaries"
								}
							]
						},
						"description": "Sends a GET request with valid user id (seeded user- 999000) & valid access token including administeredBeneficiaries\n\nExpecting status code to be 200\n\nResponse time shoule be less than 500ms\n\nResponse should be json\n\n'data' key should be available in response\n\n'included' key should be available in response\n\nThe number of beneficiaries available in the response should be 6\n\nThe value of key 'jsonData.data.relationships.administeredBeneficiaries.data[i]['type']' should be 'beneficiaries'\n\nThe number of objects in included array under response should be 6\n\nBeneficiary id's retrieved from included array in response should match beneficiary id's retreived from 'data' kay in response\n\nThe value of key 'jsonData.included[i]['type']' should be 'beneficiaries'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=activeRole - with activeRole  & valid access token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6c9363ca-74e2-4c11-9b3d-0da16c3eadb3",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000, this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e96d1542-25f1-4894-9612-7d05c8959b72",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to validate keys available in Json Response",
									"function validateTests(actual, expected){",
									"    pm.test(\"'\"+expected+\"' key should be available in response\", function () {",
									"        pm.expect(actual).to.equal(expected);",
									"    });",
									"}",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //Checking if data and included keys are available in response",
									"    var keyArray = ['data', 'included'];",
									"    for (var i in jsonData){",
									"        validateTests(i, keyArray[keyArray.indexOf(i)]);",
									"    }",
									"    ",
									"    var activeRoleId = jsonData.data['attributes']['activeRoleId'];",
									"    console.log(\"Active Role Id retrieved from 'attributes' object: \"+activeRoleId)",
									"    ",
									"    jsonValueCheck(\"The number of active role(s) available in the response should be 1\", typeof(jsonData.data.relationships.activeRole.data), 'object');",
									"    ",
									"    jsonValueCheck(\"The value of key 'jsonData.data.relationships.activeRole['data']['type']' should be 'roles'\", jsonData.data.relationships.activeRole['data']['type'], 'roles');",
									"    ",
									"    jsonValueCheck(\"The id retrieved from key 'jsonData.data.relationships.activeRole['data']['id']' should match the activeRoleId retrieved from 'attributes' object\", parseInt(jsonData.data.relationships.activeRole['data']['id']), activeRoleId);",
									"    ",
									"    jsonValueCheck(\"The number of object(s) in included array under response should be 1\", jsonData.included.length, 1);",
									"    ",
									"    jsonValueCheck(\"Id retrieved from included array in response should match activeRoleId retreived from 'attributes' object in response\", parseInt(jsonData.included[0]['id']), activeRoleId);",
									"    jsonValueCheck(\"The value of key 'jsonData.included[0]['type']' should be 'roles'\", jsonData.included[0]['type'], 'roles');",
									"    jsonValueCheck(\"The value of key 'jsonData.included[0]['attributes']['roleType']' should be 'DonorRole'\", jsonData.included[0]['attributes']['roleType'], 'DonorRole');",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999000}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=activeRole",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "activeRole"
								}
							]
						},
						"description": "Sends a GET request with valid user id (seeded user- 999000) & valid access token including activeRole\n\nExpecting status code to be 200\n\nResponse time shoule be less than 500ms\n\nResponse should be json\n\n'data' key should be available in response\n\n'included' key should be available in response\n\nThe number of active role(s) available in the response should be 1\n\nThe value of key 'jsonData.data.relationships.activeRole['data']['type']' should be 'roles'\n\nThe id retrieved from key 'jsonData.data.relationships.activeRole['data']['id']' should match the activeRoleId retrieved from 'attributes' object\n\nThe number of object(s) in included array under response should be 1\n\nId retrieved from included array in response should match activeRoleId retreived from 'attributes' object in response\n\nThe value of key 'jsonData.included[0]['type']' should be 'roles'\n\nThe value of key 'jsonData.included[0]['attributes']['roleType']' should be 'DonorRole'"
					},
					"response": []
				},
				{
					"name": "/users/{{user_id}}?include=administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,activeRole & invalid access token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "001bff8b-a254-4397-9cf6-33a6a9de64bc",
								"type": "text/javascript",
								"exec": [
									"//Userid here is 999000, this is a seeded user.",
									"pm.variables.set(\"user_id\", \"999000\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ecde2e7-9f9c-4a58-ad88-1a281d570db4",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 403\", function () {",
									"        pm.response.to.have.status(403);",
									"    });",
									"    ",
									"    pm.test(\"Response should be json\", function () {",
									"        pm.expect(typeof(jsonData)).to.equal('object');",
									"    });",
									"    ",
									"    //JSON value check",
									"    pm.test(\"Value of 'status' key should be 'Forbidden'\", function () {",
									"        pm.expect(jsonData[0].status).to.eql(\"Forbidden\");",
									"    });",
									"    ",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999010}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{api_host}}/api/v2/users/{{user_id}}?include=administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,activeRole",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"users",
								"{{user_id}}"
							],
							"query": [
								{
									"key": "include",
									"value": "administeredGroups,administeredCampaigns,administeredCompanies,administeredBeneficiaries,activeRole"
								}
							]
						},
						"description": "Sends a GET request with valid user id (seeded user- 999010) with administered entities and invalid access token\n\nExpecting status code to be 403\n\nResponse time is less than 500ms\n\nResponse should be json\n\nValue of 'status' key should be 'Forbidden'"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "678df3ac-fc9f-4963-8831-fc38d3c27dbf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2d333540-3032-478c-83e9-aa2f0397ca19",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GIVEB-168 API: Error codes: Foundational Error Code work",
			"description": null,
			"item": [
				{
					"name": "v2/taxReceiptProfiles - validation code 1026",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e7f292b-5c42-4592-9da3-32c24c413ec2",
								"type": "text/javascript",
								"exec": [
									"// Create Random name for POST ",
									"function generateName() {",
									"    var uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
									"    var lowercase = \"abcdefghijklmnopqrstuvwxyz\";",
									"    var returnStr = '';",
									"    var firstLetter = uppercase.charAt(Math.floor(Math.random() * uppercase.length));",
									"",
									"    for (var i = 0; i < 14; i++) {",
									"        returnStr += lowercase.charAt(Math.floor(Math.random() * lowercase.length));",
									"    }",
									"    return firstLetter + returnStr;",
									"}",
									"pm.variables.set(\"randomName\", generateName());",
									"",
									"pm.variables.set(\"user_id\", 999010);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35e5e731-de67-4083-b2eb-e4a27c81e7c7",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    jsonValueCheck(\"The response should be a JSON\", typeof(jsonData), 'object');",
									"    ",
									"    pm.test(\"The response body should contain 'errors' key\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"errors\");",
									"    });",
									"    ",
									"    jsonValueCheck(\"The value of key 'title' should be 'wrong_length_other:2' for input where province has more than 2 characters\", jsonData.errors[0].title, \"wrong_length_other:2\");",
									"    jsonValueCheck(\"The value of key 'ValidationCode' should be 1026 for input where province has more than 2 characters\", jsonData.errors[0].meta.validationCode, \"1026\");",
									"    ",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999010}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BCBC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"taxReceiptProfiles"
							]
						},
						"description": "Seeded user id - 999010 (api@chimp.net)\n\nSend a POST to /taxReceiptProfiles with four characters in Province field\n\nExpecting status code to be 422\n\nThe response time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe response body should contain 'errors' key\n\nThe value of key 'title' should be 'wrong_length_other:2' for input where province has more than 2 characters\n\nThe value of key 'ValidationCode' should be 1026 for input where province has more than 2 characters"
					},
					"response": [
						{
							"id": "9055fcaf-b5d0-46d4-8801-c23c84c76ed2",
							"name": "TaxReceiptProfile Error with characterLimit meta",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BCBC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Mon, 23 Apr 2018 20:48:36 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "443052f8-da72-4fd0-b651-8313fe5ecbac",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.103210",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\"errors\":[{\"title\":\"wrong_length_other:2\",\"detail\":\"address.province - wrong_length_other:2\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.province\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"1026\",\"characterLimit\":\"2\"}},{\"title\":\"inclusion\",\"detail\":\"address.province - inclusion\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.province\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"1010\"}}]}"
						},
						{
							"id": "556dc971-44df-44ea-8304-8775bf2f8a8f",
							"name": "TaxReceiptProfile formatting error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e <> {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Van <>\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V7P 1W2\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Thu, 26 Apr 2018 23:41:58 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "30f2d843-cae4-458a-9a4b-7d4ade41c92e",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.300435",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\"errors\":[{\"title\":\"invalid_formatting\",\"detail\":\"fullName - invalid_formatting\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/fullName\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"2500\"}},{\"title\":\"invalid_formatting\",\"detail\":\"address.city - invalid_formatting\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.city\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"2500\"}}]}"
						},
						{
							"id": "1e3807f8-9772-435b-b88d-1b14427d0966",
							"name": "Successfully create TaxReceiptProfile",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"Ben Gibbs\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"fund\",\n          \"id\": \"{{fund_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Wed, 11 Apr 2018 21:26:24 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-store, must-revalidate, private, max-age=0",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "location",
									"value": "http://chimp.test/api/v2/taxReceiptProfiles/184",
									"name": "location",
									"description": "Used in redirection, or when a new resource has been created."
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-miniprofiler-ids",
									"value": "[\"7shqolj1535cp8hbff0c\",\"pin1c7xg6x43b2iz8gsz\",\"t8a4h5kn1zjuqhrx8dmd\",\"3sywzbhju96pd80ja61c\",\"x85md131tmj4shpslwui\",\"4dp1ppib7usjbpxu9bsh\",\"27alvj9x6zn44t4z3khg\",\"557yl1gijha93kqwo74x\",\"mfudt0gk6rqjvlhitrl1\",\"g6o7fgj8ch1pnhrq9sm6\"]",
									"name": "x-miniprofiler-ids",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "da33c36a-b85c-4149-b3b1-f50ee2ba71a2",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.368193",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\n    \"data\": {\n        \"id\": \"185\",\n        \"type\": \"taxReceiptProfiles\",\n        \"links\": {\n            \"self\": \"http://chimp.test/api/v2/taxReceiptProfiles/185\"\n        },\n        \"attributes\": {\n            \"fullName\": \"Ben Gibbs\",\n            \"addressOne\": \"1250-1500 West Georgia St.\",\n            \"addressTwo\": null,\n            \"city\": \"Vancouver\",\n            \"province\": \"BC\",\n            \"postalCode\": \"V6G2Z6\",\n            \"country\": \"CA\",\n            \"accountNumber\": \"000000030000006G\"\n        },\n        \"relationships\": {\n            \"accountHoldable\": {\n                \"links\": {\n                    \"self\": \"http://chimp.test/api/v2/taxReceiptProfiles/185/relationships/accountHoldable\",\n                    \"related\": \"http://chimp.test/api/v2/taxReceiptProfiles/185/accountHoldable\"\n                }\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "v2/taxReceiptProfiles - validation code 1010",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e7f292b-5c42-4592-9da3-32c24c413ec2",
								"type": "text/javascript",
								"exec": [
									"// Create Random name for POST ",
									"function generateName() {",
									"    var uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
									"    var lowercase = \"abcdefghijklmnopqrstuvwxyz\";",
									"    var returnStr = '';",
									"    var firstLetter = uppercase.charAt(Math.floor(Math.random() * uppercase.length));",
									"",
									"    for (var i = 0; i < 14; i++) {",
									"        returnStr += lowercase.charAt(Math.floor(Math.random() * lowercase.length));",
									"    }",
									"    return firstLetter + returnStr;",
									"}",
									"pm.variables.set(\"randomName\", generateName());",
									"",
									"pm.variables.set(\"user_id\", 999010);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b82a6717-acb5-45ac-be9f-9c7b08272224",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    jsonValueCheck(\"The response should be a JSON\", typeof(jsonData), 'object');",
									"    ",
									"    pm.test(\"The response body should contain 'errors' key\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"errors\");",
									"    });",
									"    ",
									"    jsonValueCheck(\"The value of key 'title' should be 'inclusion' for input where province 'BC' does not match the country 'US'\", jsonData.errors[0].title, \"inclusion\");",
									"    jsonValueCheck(\"The value of key 'ValidationCode' should be 1010 for input where province 'BC' does not match the country 'US'\", jsonData.errors[0].meta.validationCode, \"1010\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999010}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BC\",\n      \"country\": \"US\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"taxReceiptProfiles"
							]
						},
						"description": "Seeded user id - 999010 (api@chimp.net)\n\nSend a POST to /taxReceiptProfiles where province does not belong to the Country keyed in\n\nExpecting status code to be 422\n\nThe response time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe response body should contain 'errors' key\n\nThe value of key 'title' should be 'inclusion' for input where province 'BC' does not match the country 'US'\n\nThe value of key 'ValidationCode' should be 1010 for input where province 'BC' does not match the country 'US'"
					},
					"response": [
						{
							"id": "20783b69-f9ab-499d-9fc1-233a3ce16539",
							"name": "TaxReceiptProfile Error with characterLimit meta",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BCBC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Mon, 23 Apr 2018 20:48:36 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "443052f8-da72-4fd0-b651-8313fe5ecbac",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.103210",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\"errors\":[{\"title\":\"wrong_length_other:2\",\"detail\":\"address.province - wrong_length_other:2\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.province\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"1026\",\"characterLimit\":\"2\"}},{\"title\":\"inclusion\",\"detail\":\"address.province - inclusion\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.province\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"1010\"}}]}"
						},
						{
							"id": "2d3df535-0afb-478d-9a49-44b102bb5014",
							"name": "Successfully create TaxReceiptProfile",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"Ben Gibbs\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"fund\",\n          \"id\": \"{{fund_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Wed, 11 Apr 2018 21:26:24 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-store, must-revalidate, private, max-age=0",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "location",
									"value": "http://chimp.test/api/v2/taxReceiptProfiles/184",
									"name": "location",
									"description": "Used in redirection, or when a new resource has been created."
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-miniprofiler-ids",
									"value": "[\"7shqolj1535cp8hbff0c\",\"pin1c7xg6x43b2iz8gsz\",\"t8a4h5kn1zjuqhrx8dmd\",\"3sywzbhju96pd80ja61c\",\"x85md131tmj4shpslwui\",\"4dp1ppib7usjbpxu9bsh\",\"27alvj9x6zn44t4z3khg\",\"557yl1gijha93kqwo74x\",\"mfudt0gk6rqjvlhitrl1\",\"g6o7fgj8ch1pnhrq9sm6\"]",
									"name": "x-miniprofiler-ids",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "da33c36a-b85c-4149-b3b1-f50ee2ba71a2",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.368193",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\n    \"data\": {\n        \"id\": \"185\",\n        \"type\": \"taxReceiptProfiles\",\n        \"links\": {\n            \"self\": \"http://chimp.test/api/v2/taxReceiptProfiles/185\"\n        },\n        \"attributes\": {\n            \"fullName\": \"Ben Gibbs\",\n            \"addressOne\": \"1250-1500 West Georgia St.\",\n            \"addressTwo\": null,\n            \"city\": \"Vancouver\",\n            \"province\": \"BC\",\n            \"postalCode\": \"V6G2Z6\",\n            \"country\": \"CA\",\n            \"accountNumber\": \"000000030000006G\"\n        },\n        \"relationships\": {\n            \"accountHoldable\": {\n                \"links\": {\n                    \"self\": \"http://chimp.test/api/v2/taxReceiptProfiles/185/relationships/accountHoldable\",\n                    \"related\": \"http://chimp.test/api/v2/taxReceiptProfiles/185/accountHoldable\"\n                }\n            }\n        }\n    }\n}"
						},
						{
							"id": "4c90a1a9-75aa-4256-b1c0-0fd524541707",
							"name": "TaxReceiptProfile formatting error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e <> {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Van <>\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V7P 1W2\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Thu, 26 Apr 2018 23:41:58 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "30f2d843-cae4-458a-9a4b-7d4ade41c92e",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.300435",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\"errors\":[{\"title\":\"invalid_formatting\",\"detail\":\"fullName - invalid_formatting\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/fullName\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"2500\"}},{\"title\":\"invalid_formatting\",\"detail\":\"address.city - invalid_formatting\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.city\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"2500\"}}]}"
						}
					]
				},
				{
					"name": "v2/taxReceiptProfiles - validation code 1001",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e7f292b-5c42-4592-9da3-32c24c413ec2",
								"type": "text/javascript",
								"exec": [
									"// Create Random name for POST ",
									"function generateName() {",
									"    var uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
									"    var lowercase = \"abcdefghijklmnopqrstuvwxyz\";",
									"    var returnStr = '';",
									"    var firstLetter = uppercase.charAt(Math.floor(Math.random() * uppercase.length));",
									"",
									"    for (var i = 0; i < 14; i++) {",
									"        returnStr += lowercase.charAt(Math.floor(Math.random() * lowercase.length));",
									"    }",
									"    return firstLetter + returnStr;",
									"}",
									"pm.variables.set(\"randomName\", generateName());",
									"",
									"pm.variables.set(\"user_id\", 999010);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "629bd25f-e211-4277-8011-4b659fa384ef",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 422\", function () {",
									"        pm.response.to.have.status(422);",
									"    });",
									"    ",
									"    jsonValueCheck(\"The response should be a JSON\", typeof(jsonData), 'object');",
									"    ",
									"    pm.test(\"The response body should contain 'errors' key\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"errors\");",
									"    });",
									"    ",
									"    jsonValueCheck(\"The value of key 'title' should be 'blank' for input where 'fullName' is empty\", jsonData.errors[0].title, \"blank\");",
									"    jsonValueCheck(\"The value of key 'ValidationCode' should be 1001 for input where 'fullName' is empty\", jsonData.errors[0].meta.validationCode, \"1001\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999010}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"taxReceiptProfiles"
							]
						},
						"description": "Seeded user id - 999010 (api@chimp.net)\n\nSend a POST to /taxReceiptProfiles with empty 'fullName'\n\n\nExpecting status code to be 422\n\nThe response time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe response body should contain 'errors' key\n\nThe value of key 'title' should be 'blank' for input where 'fullName' is empty\n\nThe value of key 'ValidationCode' should be 1001 for input where 'fullName' is empty"
					},
					"response": [
						{
							"id": "46f075cb-194f-4070-9d9a-9b19186f3a57",
							"name": "TaxReceiptProfile Error with characterLimit meta",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BCBC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Mon, 23 Apr 2018 20:48:36 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "443052f8-da72-4fd0-b651-8313fe5ecbac",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.103210",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\"errors\":[{\"title\":\"wrong_length_other:2\",\"detail\":\"address.province - wrong_length_other:2\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.province\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"1026\",\"characterLimit\":\"2\"}},{\"title\":\"inclusion\",\"detail\":\"address.province - inclusion\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.province\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"1010\"}}]}"
						},
						{
							"id": "5668b6dc-d7a1-4f2c-b994-333a70fa27af",
							"name": "TaxReceiptProfile formatting error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e <> {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Van <>\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V7P 1W2\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Thu, 26 Apr 2018 23:41:58 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "30f2d843-cae4-458a-9a4b-7d4ade41c92e",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.300435",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\"errors\":[{\"title\":\"invalid_formatting\",\"detail\":\"fullName - invalid_formatting\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/fullName\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"2500\"}},{\"title\":\"invalid_formatting\",\"detail\":\"address.city - invalid_formatting\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.city\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"2500\"}}]}"
						},
						{
							"id": "bfdfeb71-79eb-4617-b3ca-7c07f110c211",
							"name": "Successfully create TaxReceiptProfile",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"Ben Gibbs\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"fund\",\n          \"id\": \"{{fund_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Wed, 11 Apr 2018 21:26:24 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-store, must-revalidate, private, max-age=0",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "location",
									"value": "http://chimp.test/api/v2/taxReceiptProfiles/184",
									"name": "location",
									"description": "Used in redirection, or when a new resource has been created."
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-miniprofiler-ids",
									"value": "[\"7shqolj1535cp8hbff0c\",\"pin1c7xg6x43b2iz8gsz\",\"t8a4h5kn1zjuqhrx8dmd\",\"3sywzbhju96pd80ja61c\",\"x85md131tmj4shpslwui\",\"4dp1ppib7usjbpxu9bsh\",\"27alvj9x6zn44t4z3khg\",\"557yl1gijha93kqwo74x\",\"mfudt0gk6rqjvlhitrl1\",\"g6o7fgj8ch1pnhrq9sm6\"]",
									"name": "x-miniprofiler-ids",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "da33c36a-b85c-4149-b3b1-f50ee2ba71a2",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.368193",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\n    \"data\": {\n        \"id\": \"185\",\n        \"type\": \"taxReceiptProfiles\",\n        \"links\": {\n            \"self\": \"http://chimp.test/api/v2/taxReceiptProfiles/185\"\n        },\n        \"attributes\": {\n            \"fullName\": \"Ben Gibbs\",\n            \"addressOne\": \"1250-1500 West Georgia St.\",\n            \"addressTwo\": null,\n            \"city\": \"Vancouver\",\n            \"province\": \"BC\",\n            \"postalCode\": \"V6G2Z6\",\n            \"country\": \"CA\",\n            \"accountNumber\": \"000000030000006G\"\n        },\n        \"relationships\": {\n            \"accountHoldable\": {\n                \"links\": {\n                    \"self\": \"http://chimp.test/api/v2/taxReceiptProfiles/185/relationships/accountHoldable\",\n                    \"related\": \"http://chimp.test/api/v2/taxReceiptProfiles/185/accountHoldable\"\n                }\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "v2/taxReceiptProfiles - expecting error 'There was a problem in the JSON you submitted'",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e7f292b-5c42-4592-9da3-32c24c413ec2",
								"type": "text/javascript",
								"exec": [
									"// Create Random name for POST ",
									"function generateName() {",
									"    var uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
									"    var lowercase = \"abcdefghijklmnopqrstuvwxyz\";",
									"    var returnStr = '';",
									"    var firstLetter = uppercase.charAt(Math.floor(Math.random() * uppercase.length));",
									"",
									"    for (var i = 0; i < 14; i++) {",
									"        returnStr += lowercase.charAt(Math.floor(Math.random() * lowercase.length));",
									"    }",
									"    return firstLetter + returnStr;",
									"}",
									"pm.variables.set(\"randomName\", generateName());",
									"",
									"pm.variables.set(\"user_id\", 999010);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2600dbac-baee-47d8-93d2-e13ea7afa59d",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 400\", function () {",
									"        pm.response.to.have.status(400);",
									"    });",
									"    ",
									"    jsonValueCheck(\"The response should be a JSON\", typeof(jsonData), 'object');",
									"    ",
									"    pm.test(\"The response body should contain 'errors' key\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"errors\");",
									"    });",
									"    ",
									"    jsonValueCheck(\"The value of key 'title' should be 'There was a problem in the JSON you submitted' for input where value for key 'province' is missing\", jsonData.errors[0].title, \"There was a problem in the JSON you submitted\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999010}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\":  ,\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"taxReceiptProfiles"
							]
						},
						"description": "Seeded user id - 999010 (api@chimp.net)\n\nSend a POST to /taxReceiptProfiles where value for key 'province' is missing in request body\n\nExpecting status code to be 422\n\nThe response time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe response body should contain 'errors' key\n\nThe value of key 'title' should be 'blank' for input where value for key 'province' is missing\n\nThe value of key 'ValidationCode' should be 1001 for input where value for key 'province' is missing"
					},
					"response": [
						{
							"id": "581da6b2-7ec1-4cc8-9f73-f66e56293f93",
							"name": "TaxReceiptProfile Error with characterLimit meta",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BCBC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Mon, 23 Apr 2018 20:48:36 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "443052f8-da72-4fd0-b651-8313fe5ecbac",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.103210",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\"errors\":[{\"title\":\"wrong_length_other:2\",\"detail\":\"address.province - wrong_length_other:2\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.province\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"1026\",\"characterLimit\":\"2\"}},{\"title\":\"inclusion\",\"detail\":\"address.province - inclusion\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.province\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"1010\"}}]}"
						},
						{
							"id": "0b011f57-e62b-4e5f-951c-a13e155706d3",
							"name": "Successfully create TaxReceiptProfile",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"Ben Gibbs\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"fund\",\n          \"id\": \"{{fund_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Wed, 11 Apr 2018 21:26:24 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-store, must-revalidate, private, max-age=0",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "location",
									"value": "http://chimp.test/api/v2/taxReceiptProfiles/184",
									"name": "location",
									"description": "Used in redirection, or when a new resource has been created."
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-miniprofiler-ids",
									"value": "[\"7shqolj1535cp8hbff0c\",\"pin1c7xg6x43b2iz8gsz\",\"t8a4h5kn1zjuqhrx8dmd\",\"3sywzbhju96pd80ja61c\",\"x85md131tmj4shpslwui\",\"4dp1ppib7usjbpxu9bsh\",\"27alvj9x6zn44t4z3khg\",\"557yl1gijha93kqwo74x\",\"mfudt0gk6rqjvlhitrl1\",\"g6o7fgj8ch1pnhrq9sm6\"]",
									"name": "x-miniprofiler-ids",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "da33c36a-b85c-4149-b3b1-f50ee2ba71a2",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.368193",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\n    \"data\": {\n        \"id\": \"185\",\n        \"type\": \"taxReceiptProfiles\",\n        \"links\": {\n            \"self\": \"http://chimp.test/api/v2/taxReceiptProfiles/185\"\n        },\n        \"attributes\": {\n            \"fullName\": \"Ben Gibbs\",\n            \"addressOne\": \"1250-1500 West Georgia St.\",\n            \"addressTwo\": null,\n            \"city\": \"Vancouver\",\n            \"province\": \"BC\",\n            \"postalCode\": \"V6G2Z6\",\n            \"country\": \"CA\",\n            \"accountNumber\": \"000000030000006G\"\n        },\n        \"relationships\": {\n            \"accountHoldable\": {\n                \"links\": {\n                    \"self\": \"http://chimp.test/api/v2/taxReceiptProfiles/185/relationships/accountHoldable\",\n                    \"related\": \"http://chimp.test/api/v2/taxReceiptProfiles/185/accountHoldable\"\n                }\n            }\n        }\n    }\n}"
						},
						{
							"id": "26cd28ef-d88c-4065-bbb5-9f5861d4504f",
							"name": "TaxReceiptProfile formatting error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e <> {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Van <>\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V7P 1W2\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Thu, 26 Apr 2018 23:41:58 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "30f2d843-cae4-458a-9a4b-7d4ade41c92e",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.300435",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\"errors\":[{\"title\":\"invalid_formatting\",\"detail\":\"fullName - invalid_formatting\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/fullName\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"2500\"}},{\"title\":\"invalid_formatting\",\"detail\":\"address.city - invalid_formatting\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.city\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"2500\"}}]}"
						}
					]
				},
				{
					"name": "v2/taxReceiptProfiles - creating taxReceiptProfile successful",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e7f292b-5c42-4592-9da3-32c24c413ec2",
								"type": "text/javascript",
								"exec": [
									"// Create Random name for POST ",
									"function generateName() {",
									"    var uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
									"    var lowercase = \"abcdefghijklmnopqrstuvwxyz\";",
									"    var returnStr = '';",
									"    var firstLetter = uppercase.charAt(Math.floor(Math.random() * uppercase.length));",
									"",
									"    for (var i = 0; i < 14; i++) {",
									"        returnStr += lowercase.charAt(Math.floor(Math.random() * lowercase.length));",
									"    }",
									"    return firstLetter + returnStr;",
									"}",
									"pm.variables.set(\"randomName\", generateName());",
									"",
									"pm.variables.set(\"user_id\", 999010);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2e126c0-ad33-4e14-babf-3792a3de067d",
								"type": "text/javascript",
								"exec": [
									"//Response in json format",
									"var jsonData = pm.response.json();",
									"",
									"//Function to assert Json value with the expected value",
									"function jsonValueCheck(testCase, jsonKey, expectedValue){",
									"    pm.test(testCase, function () {",
									"        pm.expect(jsonKey).to.eql(expectedValue);",
									"    });",
									"}",
									"",
									"var schema = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"data\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"id\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"type\": {",
									"          \"type\": \"string\"",
									"        },",
									"        \"links\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"self\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [\"self\"]",
									"        },",
									"        \"attributes\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"fullName\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"addressOne\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"addressTwo\": {",
									"              \"type\": \"null\"",
									"            },",
									"            \"city\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"province\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"postalCode\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"country\": {",
									"              \"type\": \"string\"",
									"            },",
									"            \"accountNumber\": {",
									"              \"type\": \"string\"",
									"            }",
									"          },",
									"          \"required\": [\"fullName\",\"addressOne\",\"addressTwo\",\"city\",\"province\",\"postalCode\",\"country\",\"accountNumber\"]",
									"        },",
									"        \"relationships\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"accountHoldable\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"links\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"self\": {",
									"                      \"type\": \"string\"",
									"                    },",
									"                    \"related\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [\"self\",\"related\"]",
									"                }",
									"              },",
									"              \"required\": [\"links\"]",
									"            }",
									"          },",
									"          \"required\": [\"accountHoldable\"]",
									"        }",
									"      },",
									"      \"required\": [\"id\",\"type\",\"links\",\"attributes\",\"relationships\"]",
									"    }",
									"  },",
									"  \"required\": [\"data\"]",
									"}",
									"",
									"try {",
									"    //Status code check",
									"    pm.test(\"Expecting status code to be 201\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"    ",
									"    jsonValueCheck(\"The response should be a JSON\", typeof(jsonData), 'object');",
									"    ",
									"    jsonValueCheck(\"The response should match the expected schema and should contain expected keys\", tv4.validate(jsonData, schema), true);",
									"    ",
									"    jsonValueCheck(\"The value of key 'type' should be 'taxReceiptProfiles'\", jsonData.data.type, \"taxReceiptProfiles\");",
									"    ",
									"} catch (e){",
									"    console.log(e);",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth0_access_token_999010}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"api",
								"v2",
								"taxReceiptProfiles"
							]
						},
						"description": "Seeded user id - 999010 (api@chimp.net)\n\nSend a POST to /taxReceiptProfiles with valid details\n\nExpecting status code to be 201\n\nThe response time shoule be less than 500ms\n\nThe response should be a JSON\n\nThe response should match the expected schema and should contain expected keys\n\nThe value of key 'type' should be 'taxReceiptProfiles'"
					},
					"response": [
						{
							"id": "ac043846-65ce-470a-8046-08f90d6e75f0",
							"name": "TaxReceiptProfile formatting error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e <> {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Van <>\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V7P 1W2\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Thu, 26 Apr 2018 23:41:58 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "30f2d843-cae4-458a-9a4b-7d4ade41c92e",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.300435",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\"errors\":[{\"title\":\"invalid_formatting\",\"detail\":\"fullName - invalid_formatting\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/fullName\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"2500\"}},{\"title\":\"invalid_formatting\",\"detail\":\"address.city - invalid_formatting\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.city\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"2500\"}}]}"
						},
						{
							"id": "e0823e58-a2ed-44c6-8680-673de259cfec",
							"name": "TaxReceiptProfile Error with characterLimit meta",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"TRP_e2e {{randomName}}\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BCBC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"user\",\n          \"id\": \"{{user_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Mon, 23 Apr 2018 20:48:36 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "443052f8-da72-4fd0-b651-8313fe5ecbac",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.103210",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\"errors\":[{\"title\":\"wrong_length_other:2\",\"detail\":\"address.province - wrong_length_other:2\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.province\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"1026\",\"characterLimit\":\"2\"}},{\"title\":\"inclusion\",\"detail\":\"address.province - inclusion\",\"code\":\"100\",\"source\":{\"pointer\":\"/data/attributes/address.province\"},\"status\":\"422\",\"meta\":{\"validationCode\":\"1010\"}}]}"
						},
						{
							"id": "3afda855-5699-4c89-9f70-d8d022bab636",
							"name": "Successfully create TaxReceiptProfile",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json"
									},
									{
										"key": "Authorization",
										"value": "{{auth_token}}",
										"disabled": true
									},
									{
										"key": "Authorization",
										"value": "Token 999000"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": {\n    \"type\": \"taxReceiptProfiles\",\n    \"attributes\": {\n      \"fullName\": \"Ben Gibbs\",\n      \"addressOne\": \"1250-1500 West Georgia St.\",\n      \"city\": \"Vancouver\",\n      \"province\": \"BC\",\n      \"country\": \"CA\",\n      \"postalCode\": \"V6G 2Z6\"\n    },\n    \"relationships\": {\n      \"accountHoldable\": {\n        \"data\": {\n          \"type\": \"fund\",\n          \"id\": \"{{fund_id}}\"\n        }\n      }\n    }\n  }\n}"
								},
								"url": {
									"raw": "{{api_host}}/api/v2/taxReceiptProfiles",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"api",
										"v2",
										"taxReceiptProfiles"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Date",
									"value": "Wed, 11 Apr 2018 21:26:24 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "cache-control",
									"value": "no-store, must-revalidate, private, max-age=0",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								},
								{
									"key": "content-type",
									"value": "application/vnd.api+json; charset=utf-8",
									"name": "content-type",
									"description": "The mime type of this content"
								},
								{
									"key": "location",
									"value": "http://chimp.test/api/v2/taxReceiptProfiles/184",
									"name": "location",
									"description": "Used in redirection, or when a new resource has been created."
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "set-cookie",
									"value": "__profilin=p%3Dt; path=/",
									"name": "set-cookie",
									"description": "an HTTP cookie"
								},
								{
									"key": "transfer-encoding",
									"value": "chunked",
									"name": "transfer-encoding",
									"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
								},
								{
									"key": "vary",
									"value": "Origin",
									"name": "vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "x-content-type-options",
									"value": "nosniff",
									"name": "x-content-type-options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "x-frame-options",
									"value": "SAMEORIGIN",
									"name": "x-frame-options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "x-meta-request-version",
									"value": "0.4.3",
									"name": "x-meta-request-version",
									"description": "Custom header"
								},
								{
									"key": "x-miniprofiler-ids",
									"value": "[\"7shqolj1535cp8hbff0c\",\"pin1c7xg6x43b2iz8gsz\",\"t8a4h5kn1zjuqhrx8dmd\",\"3sywzbhju96pd80ja61c\",\"x85md131tmj4shpslwui\",\"4dp1ppib7usjbpxu9bsh\",\"27alvj9x6zn44t4z3khg\",\"557yl1gijha93kqwo74x\",\"mfudt0gk6rqjvlhitrl1\",\"g6o7fgj8ch1pnhrq9sm6\"]",
									"name": "x-miniprofiler-ids",
									"description": "Custom header"
								},
								{
									"key": "x-request-id",
									"value": "da33c36a-b85c-4149-b3b1-f50ee2ba71a2",
									"name": "x-request-id",
									"description": "Custom header"
								},
								{
									"key": "x-runtime",
									"value": "0.368193",
									"name": "x-runtime",
									"description": "Custom header"
								},
								{
									"key": "x-xss-protection",
									"value": "1; mode=block",
									"name": "x-xss-protection",
									"description": "Cross-site scripting (XSS) filter"
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "p%3Dt",
									"key": "__profilin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "chimp.test",
									"path": "/",
									"secure": false,
									"value": "POST",
									"key": "request_method"
								}
							],
							"body": "{\n    \"data\": {\n        \"id\": \"185\",\n        \"type\": \"taxReceiptProfiles\",\n        \"links\": {\n            \"self\": \"http://chimp.test/api/v2/taxReceiptProfiles/185\"\n        },\n        \"attributes\": {\n            \"fullName\": \"Ben Gibbs\",\n            \"addressOne\": \"1250-1500 West Georgia St.\",\n            \"addressTwo\": null,\n            \"city\": \"Vancouver\",\n            \"province\": \"BC\",\n            \"postalCode\": \"V6G2Z6\",\n            \"country\": \"CA\",\n            \"accountNumber\": \"000000030000006G\"\n        },\n        \"relationships\": {\n            \"accountHoldable\": {\n                \"links\": {\n                    \"self\": \"http://chimp.test/api/v2/taxReceiptProfiles/185/relationships/accountHoldable\",\n                    \"related\": \"http://chimp.test/api/v2/taxReceiptProfiles/185/accountHoldable\"\n                }\n            }\n        }\n    }\n}"
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "05b7d257-3be1-4755-9477-c5ee840a4766",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6b6ae424-363d-4d82-a018-d70666225178",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3aaaa779-e8a6-4eb6-a897-e76a487dadfa",
				"type": "text/javascript",
				"exec": [
					"//Access token for user id - 999000",
					"",
					"pm.sendRequest({",
					"    url: pm.environment.get(\"auth0_token_url\"),",
					"    method: 'POST',",
					"    header: [",
					"        'Content-Type: application/x-www-form-urlencoded'",
					"    ],",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: \"grant_type\", value: \"password\", disabled: false},",
					"            {key: \"client_id\", value: \"nflJDPtqECgZfeCSahw86tgDAOVhBQ74\", disabled: false},",
					"            {key: \"audience\", value: \"https://lab.24467.org/api/v2/\", disabled: false},",
					"            {key: \"username\", value: \"api@chimp.net\", disabled: false},",
					"            {key: \"password\", value: \"GiveAndLetGive!123\", disabled: false},",
					"            {key: \"scope\", value:\"openid\",disabled: false}",
					"        ]",
					"    }",
					"}, function (err, res) {",
					"    if (res.json().error) {",
					"        console.log(\"### ERROR - There was a problem getting the stripe token. Check console for details.\");",
					"    } else {",
					"        pm.variables.set(\"auth0_access_token_999000\", res.json().access_token);",
					"        console.log(\"999000 - You got a access_token of: \" + pm.variables.get(\"auth0_access_token_999000\"));    ",
					"    }",
					"});",
					"",
					"//Access token for user id - 999010",
					"pm.sendRequest({",
					"    url: pm.environment.get(\"auth0_token_url\"),",
					"    method: 'POST',",
					"    header: [",
					"        'Content-Type: application/x-www-form-urlencoded'",
					"    ],",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: \"grant_type\", value: \"password\", disabled: false},",
					"            {key: \"client_id\", value: \"nflJDPtqECgZfeCSahw86tgDAOVhBQ74\", disabled: false},",
					"            {key: \"audience\", value: \"https://lab.24467.org/api/v2/\", disabled: false},",
					"            {key: \"username\", value: \"api_2@chimp.net\", disabled: false},",
					"            {key: \"password\", value: \"GiveAndLetGive!123\", disabled: false},",
					"            {key: \"scope\", value:\"openid\",disabled: false}",
					"        ]",
					"    }",
					"}, function (err, res) {",
					"    if (res.json().error) {",
					"        console.log(\"### ERROR - There was a problem getting the access token. Check console for details.\");",
					"    } else {",
					"        pm.variables.set(\"auth0_access_token_999010\", res.json().access_token);",
					"        console.log(\"999010 - You got a access_token of: \" + pm.variables.get(\"auth0_access_token_999010\"));    ",
					"    }",
					"});",
					"",
					"//Access token for user id - 999030",
					"pm.sendRequest({",
					"    url: pm.environment.get(\"auth0_token_url\"),",
					"    method: 'POST',",
					"    header: [",
					"        'Content-Type: application/x-www-form-urlencoded'",
					"    ],",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: \"grant_type\", value: \"password\", disabled: false},",
					"            {key: \"client_id\", value: \"nflJDPtqECgZfeCSahw86tgDAOVhBQ74\", disabled: false},",
					"            {key: \"audience\", value: \"https://lab.24467.org/api/v2/\", disabled: false},",
					"            {key: \"username\", value: \"api_4@chimp.net\", disabled: false},",
					"            {key: \"password\", value: \"GiveAndLetGive!123\", disabled: false},",
					"            {key: \"scope\", value:\"openid\",disabled: false}",
					"        ]",
					"    }",
					"}, function (err, res) {",
					"    if (res.json().error) {",
					"        console.log(\"### ERROR - There was a problem getting the access token. Check console for details.\");",
					"    } else {",
					"        pm.variables.set(\"auth0_access_token_999030\", res.json().access_token);",
					"        console.log(\"999030 - You got a access_token of: \" + pm.variables.get(\"auth0_access_token_999030\"));    ",
					"    }",
					"});",
					"",
					"//Access token for user id - 31",
					"pm.sendRequest({",
					"    url: pm.environment.get(\"auth0_token_url\"),",
					"    method: 'POST',",
					"    header: [",
					"        'Content-Type: application/x-www-form-urlencoded'",
					"    ],",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: \"grant_type\", value: \"password\", disabled: false},",
					"            {key: \"client_id\", value: \"nflJDPtqECgZfeCSahw86tgDAOVhBQ74\", disabled: false},",
					"            {key: \"audience\", value: \"https://lab.24467.org/api/v2/\", disabled: false},",
					"            {key: \"username\", value: \"admin@chimp.net\", disabled: false},",
					"            {key: \"password\", value: \"GiveAndLetGive!123\", disabled: false},",
					"            {key: \"scope\", value:\"openid\",disabled: false}",
					"        ]",
					"    }",
					"}, function (err, res) {",
					"    if (res.json().error) {",
					"        console.log(\"### ERROR - There was a problem getting the stripe token. Check console for details.\");",
					"    } else {",
					"        pm.variables.set(\"auth0_access_token_31\", res.json().access_token);",
					"        console.log(\"31 - You got a access_token of: \" + pm.variables.get(\"auth0_access_token_31\"));    ",
					"    }",
					"});",
					"",
					"",
					"//Access token for user id - 999020",
					"pm.sendRequest({",
					"    url: pm.environment.get(\"auth0_token_url\"),",
					"    method: 'POST',",
					"    header: [",
					"        'Content-Type: application/x-www-form-urlencoded'",
					"    ],",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            {key: \"grant_type\", value: \"password\", disabled: false},",
					"            {key: \"client_id\", value: \"nflJDPtqECgZfeCSahw86tgDAOVhBQ74\", disabled: false},",
					"            {key: \"audience\", value: \"https://lab.24467.org/api/v2/\", disabled: false},",
					"            {key: \"username\", value: \"api_3@chimp.net\", disabled: false},",
					"            {key: \"password\", value: \"GiveAndLetGive!123\", disabled: false},",
					"            {key: \"scope\", value:\"openid\",disabled: false}",
					"        ]",
					"    }",
					"}, function (err, res) {",
					"    if (res.json().error) {",
					"        console.log(\"### ERROR - There was a problem getting the stripe token. Check console for details.\");",
					"    } else {",
					"        pm.variables.set(\"auth0_access_token_999020\", res.json().access_token);",
					"        console.log(\"999020 - You got a access_token of: \" + pm.variables.get(\"auth0_access_token_999020\"));    ",
					"    }",
					"});",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "45c04f49-63ec-461e-99ac-04c948155051",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
